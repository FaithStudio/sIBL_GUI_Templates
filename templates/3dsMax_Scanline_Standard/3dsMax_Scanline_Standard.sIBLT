[Template]
Name = @Name | 3dsMax Scanline Standard | String | Template Name
Path = @Path | | String | Template Path
HelpFile = @HelpFile | help/3dsMax_Scanline_Standard_Template_Manual.html | String | Help File
Release = @Release | 2.0.4 | String | Template Release
Date = @Date | 27 November 2012 | String | Date
Author = @Author | Kel Solaar / Dschaga / Jeff Hanna | String | Author
Email = @Email | christian@cgtechniques.com | String | Email
Url = @Url | http://www.thomasmansencal.com/ | String | Url
Software = @Software | 3dsMax  | String | Software
Version = @Version | 2010 - 2013 | String | Version
Renderer = @Renderer | Scanline | String | Renderer
OutputScript = @OutputScript | sIBL_3dsmax_Import.ms | String | Output Script
Comment = @Comment | This is 3dsmax Scanline Template. | String | Comment

[Ibl Set Attributes]
Background|BGfile = @BGfile
Reflection|REFfile = @REFfile
Enviroment|EVfile = @EVfile
Sun|SUNu = @SUNu
Sun|SUNv = @SUNv
Sun|SUNcolor = @SUNcolor
Sun|SUNmulti = @SUNmulti
Lights|DynamicLights = @dynamicLights

[Common Attributes]
sceneSetupPrefix = @sceneSetupPrefix | sIBL | String | Scene Setup Prefix
createBackground = @createBackground | 1 | Boolean | Create Background
createReflection = @createReflection | 1 | Boolean | Create Reflection
createLighting = @createLighting | 1 | Boolean | Create Lighting
createSun = @createSun | 1 | Boolean | Create Sun
createLights = @createLights | 1 | Boolean | Create Dynamic Lights

[Additional Attributes]
displayFeedback = @displayFeedback | 1 | Boolean | Display Feedback
sunLightType = @sunLightType | Direct;Spot;Omni;Photometric | Enum | Sun Light Type
dynamicLightsType = @dynamicLightsType | Direct;Spot;Omni;Photometric | Enum | Dynamic Lights Type
hideLights = @hideLights | 1 | Boolean | Hide Lights
createGround = @createGround | 1 | Boolean | Create Ground
activateLinearWorkflow = @activateLinearWorkflow | 1 | Boolean | Activate Linear Workflow

[Remote Connection]
ConnectionType = @ConnectionType | Win32 | String
TargetApplication = @TargetApplication | MAX.Application | String
ExecutionCommand = @ExecutionCommand | fileIn ("$loaderScriptPath") | String

[Script]
/*
@OutputScript - @Release for @Software @Version
Author: @Author
EMail: @Email
Homepage: @Url
Template path: @Path
Template last modified: @Date
sIBL_GUI
*/

struct __constants (applicationName, prefix, title, globalPreProcessCallback, globalPostProcessCallback, localPreProcessCommand, localPostProcessCommand)
struct __data (backgroundFilePath, reflectionFilePath, lightingFilePath, sunU, sunV, sunColor, sunMultiplier, dynamicLights)
struct __options (createBackground, createLighting, createReflection, createSun, createLights, displayFeedback, feedbackRadius, hideLights, sunLightType, dynamicLightsType, createGround, activateLinearWorkflow)
struct __sceneNodes (dataGroup, lightsGroup, feedback, domeLight)

global Constants = __constants applicationName:"sIBL_GUI" prefix:"@sceneSetupPrefix" title:"Smart IBL" globalPreProcessCallback:"sIBL_3dsmax_preProcessCallback" globalPostProcessCallback:"sIBL_3dsmax_postProcessCallback" localPreProcessCommand:"sIBL_3dsmax_Scanline_preProcessCallback" localPostProcessCommand:"sIBL_3dsmax_Scanline_postProcessCallback"
global Datas = __data backgroundFilePath:"@BGfile" reflectionFilePath:"@REFfile" lightingFilePath:"@EVfile" sunU:@SUNu sunV:@SUNv sunColor:"@SUNcolor" sunMultiplier:@SUNmulti dynamicLights:"@dynamicLights"
global UserOptions = __options createBackground:@createBackground createReflection:@createReflection createLighting:@createLighting createSun:@createSun createLights:@createLights displayFeedback:@displayFeedback feedbackRadius:1000 sunLightType:"@sunLightType" dynamicLightsType:"@dynamicLightsType" hideLights:@hideLights createGround:@createGround activateLinearWorkflow:@activateLinearWorkflow
global SceneNodes = __sceneNodes()

fn getSceneExtent =
(
	sceneExtent = 0
	for object_ in Geometry do
	(
		bBox = nodeGetBoundingBox object_ (Matrix3 1)
		for i = 1 to bBox.count  do
		(
			toArray = #(abs(bBox[i].x), abs(bBox[i].y), abs(bBox[i].z))
			if amax(toArray) > sceneExtent then sceneExtent = amax(toArray)
		)
	)

	return sceneExtent
)

fn truncFloatNumber number truncValue =
(
	if truncValue != 0 then
		return floor(number / truncValue) * truncValue
	else
		return number
)

fn getExtendedFeedbackRadius feedbackRadius =
(
	sceneExtent = getSceneExtent()
	sceneExtent = sceneExtent + (sceneExtent*50/100)

	if sceneExtent < feedbackRadius then
		return feedbackRadius
	else
		return truncFloatNumber sceneExtent 10
)

fn getDefaultControllers currentNode =
(
	currentNode.Transform.controller = prs ()
	currentNode.rotation.controller = Euler_XYZ ()
	currentNode.scale.controller = bezier_scale ()
)

fn environmentDeletion =
(
	-- Nodes Deletion.
	delete (execute ( "$" + Constants.prefix + "*"))

	-- Environment Map Deletion.
	environmentMap = undefined

	freeSceneBitmaps()
)

fn activateRenderer =
(
	if(IsKindOf renderers.current Default_Scanline_Renderer == False ) then
	(
		renderers.current = Default_Scanline_Renderer()
	)
	SceneRadiosity.radiosity = Light_Tracer()
)

fn hideLights =
(
	hide lights
)

fn getControlsGroup =
(
	local controlsPoint = Point name:(Constants.prefix + "_Point") centermarker:off axistripod:off cross:off Box:off
	SceneNodes.dataGroup = group controlsPoint name:(Constants.prefix + "_Data")
)

fn getFeedback feedbackRadius createBackground texturePath =
(
	local feedbackSphere = Sphere radius:feedbackRadius segs:32 mapcoords:on backfacecull:on renderable:off

	getDefaultControllers feedbackSphere

	local normalModifier_ = Normalmodifier()
	normalModifier_.flip = True
	addModifier feedbackSphere normalModifier_
	collapseStack feedbackSphere

	if(createBackground == 1) then
	(
		local feedbackShader = StandardMaterial name:(Constants.prefix + "_FeedbackShader")
		feedbackShader.selfIllumAmount = 100
		feedbackShader.diffuse = color 255 255 255
		feedbackShader.ambient = feedbackShader.diffuse

		feedBackTexture = Bitmaptexture fileName:texturePath
		feedBackTexture.coordinates.u_tiling = -1
		feedbackShader.diffuseMap =  feedBackTexture
		feedbackShader.selfillumMap =  feedBackTexture

		feedbackSphere.material = feedbackShader
		showTextureMap feedbackShader True
	)

	feedbackSphere.parent = SceneNodes.dataGroup
	setTransformLockFlags feedbackSphere #{1,2,3,4,5}

	feedbackSphere.name = (Constants.prefix + "_Feedback")
	SceneNodes.feedback = feedbackSphere
)

fn getLightsGroup =
(
	local controlsPoint = Point name:(Constants.prefix + "_Lights_Point") centermarker:off axistripod:off cross:off Box:off
	SceneNodes.lightsGroup = group controlsPoint name:(Constants.prefix + "_Lights")

	getDefaultControllers SceneNodes.lightsGroup

	SceneNodes.lightsGroup.parent = SceneNodes.dataGroup
)

fn createSkyLight =
(
	local iblSkylight = Skylight()
	iblSkylight.sky_mode = 1

	iblSkylight.parent = SceneNodes.dataGroup

	iblSkylight.name = (Constants.prefix + "_SkyLight")

	SceneNodes.domeLight = iblSkylight
)

fn getLight lightType lightName lightColor intensity lightDistance uCoordinate vCoordinate =
(
	if(SceneNodes.lightsGroup == undefined) then
		getLightsGroup()

	lightColorTokens = filterstring lightColor ","

	uCoordinate += 0.75
	projectedRadius = cos((0.5 - vCoordinate) * 180)

	local xPos = lightDistance * ((cos(uCoordinate * 360)) * projectedRadius)
	local yPos = lightDistance * ((sin(uCoordinate * 360)) * projectedRadius) * -1
	local zPos = lightDistance * (sin((0.5 - vCoordinate) * 180))

	local lightTarget = TargetObject transform:(matrix3 [1,0,0] [0,1,0] [0,0,1] [0,0,0])
	lightTarget.parent = SceneNodes.lightsGroup

	local lightColor = color (lightColorTokens[1] as float) (lightColorTokens[2] as float) (lightColorTokens[3] as float)
	local lightFalloff = lightDistance + 5

	if(lightType == "Direct") then
	(
		local light = TargetDirectionalLight castShadows:on hotspot:lightDistance falloff:lightFalloff
	)
	else if(lightType == "Spot") then
	(
		local light = TargetSpot castShadows:on hotspot:lightDistance falloff:lightFalloff
	)
	else if(lightType == "Omni") then
	(
		local light = OmniLight castShadows:on
	)
	else if(lightType == "Photometric") then
	(
		local light = Target_Light rgbFilter:lightColor castShadows:on
		light.intensity = 1.0 * (intensity as float)  * (lightDistance * lightDistance)
	)

	if(lightType == "Direct" or lightType == "Spot" or lightType == "Omni" or lightType == "Photometric") then
	(
		light.rgb = lightColor
		light.multiplier = (intensity as float)
		light.shadowGenerator = RaytraceShadow()
	)

	light.pos = [(xPos as float),  (yPos as float), (zPos as float)]
	light.target = lightTarget

	light.parent = SceneNodes.lightsGroup

	lightTarget.name = lightName + "_Target"
	light.name = lightName
)

fn createSun sunLightType sunColor sunMultiplier lightDistance sunU sunV =
(
	getLight sunLightType (Constants.prefix + "_Sun") sunColor sunMultiplier lightDistance sunU sunV
)

fn createDynamicLights dynamicLightsType dynamicLights lightDistance =
(
	local dynamicLightsTokens = filterString dynamicLights "|"

	for i = 1 to dynamicLightsTokens.count by 8 do
	(
		local lightName = Constants.prefix + substituteString dynamicLightsTokens[i+1] " " "_"
		local lightColor = dynamicLightsTokens[i+2] + "," + dynamicLightsTokens[i+3] + "," + dynamicLightsTokens[i+4]
		local intensity = dynamicLightsTokens[i+5] as float
		local uCoordinate = dynamicLightsTokens[i+6] as float
		local vCoordinate = dynamicLightsTokens[i+7] as float

		getLight dynamicLightsType lightName lightColor intensity lightDistance uCoordinate vCoordinate
	)
)

fn getEnvironmentBranch branchName filePath =
(
	local texture = Bitmaptexture()
	texture.filename = filePath
	texture.coordinates.mappingtype = 1
	texture.coordinates.mapping = 0
	texture.coordinates.U_Tiling = -1.0

	texture.name = branchName + "_BitmapTexture"

	return texture
)

fn setEnvironment createBackground createLighting createReflection backgroundFilePath lightingFilePath reflectionFilePath =
(
	if(createBackground == 1) then
	(
		local backgroundBranch = getEnvironmentBranch (Constants.prefix + "_Background") backgroundFilePath
		environmentMap = backgroundBranch
		-- Enforcing The Mapping Type Because Of A Fucking Strange Bug.
		environmentMap.coordinates.mapping = 0
	)

	if(createLighting == 1) then
	(
		local lightingBranch = getEnvironmentBranch (Constants.prefix + "_Lighting") lightingFilePath
		SceneNodes.domeLight.sky_color_map = lightingBranch
	)

	if(createReflection == 1) then
	(
		--local reflectionBranch = getEnvironmentBranch (Constants.prefix + "_Reflection") reflectionFilePath
		print (Constants.applicationName + " | This Template doesn't support reflections, reflections shading branch skipped!")
	)
)

fn connectFeedbackToSIBLShaders createBackground createLighting createReflection =
(
	if(createBackground == 1) then
	(
		paramWire.connect SceneNodes.feedback.rotation.controller[#Z_Rotation] environmentMap.coordinates[#U_Offset] "(Z_Rotation-(pi*2))*2/pi/4"
	)

	if(createLighting == 1) then
	(
		paramWire.connect SceneNodes.feedback.rotation.controller[#Z_Rotation] SceneNodes.domeLight.sky_color_map.coordinates[#U_Offset] "(Z_Rotation-(pi*2))*2/pi/4"
	)

	if(createReflection == 1) then
		print (Constants.applicationName + " | This Template doesn't support reflections, reflections branch Visual Feedback connections skipped!")
)

fn connectFeedbackToLights =
(
	if(SceneNodes.lightsGroup != undefined) then
	(
		paramWire.connect SceneNodes.feedback.rotation.controller[#Z_Rotation] SceneNodes.lightsGroup.rotation.controller[#Z_Rotation] "Z_Rotation"
		paramWire.connect SceneNodes.feedback.transform.controller[#Scale] SceneNodes.lightsGroup.transform.controller[#Scale] "Scale"
	)
)

fn createGround currentScale =
(
	local currentScale = currentScale * (sqrt 2)
	local currentPlane = plane typeinCreationMethod:1 length:currentScale width:currentScale
	currentPlane.backfacecull = on
	currentPlane.parent = SceneNodes.dataGroup

	local groundShader = StandardMaterial name:(Constants.prefix + "_GroundShader")
	currentPlane.material = groundShader

	currentPlane.name = (Constants.prefix + "_Ground")
)

fn activateLinearWorkflow createBackground =
(
	SceneExposureControl.exposureControl = Logarithmic_Exposure_Control()
)

fn setup =
(
	if(Default_Scanline_Renderer != undefined) then
	(
		if(execute(Constants.globalPreProcessCallback) != undefined) then
		(
			print (Constants.applicationName + " | Executing overall preprocess Callback!")
			execute(Constants.globalPreProcessCallback + "()")
		)

		if(execute(Constants.localPreProcessCommand) != undefined) then
		(
			print (Constants.applicationName + " | Executing Template specific preprocess Callback!")
			execute(Constants.localPreProcessCommand + "()")
		)

		print (Constants.applicationName + " | Starting '" +  Constants.title + "' file import!")

		environmentDeletion()

		UserOptions.feedbackRadius = getExtendedFeedbackRadius UserOptions.feedbackRadius

		activateRenderer()

		if(UserOptions.hideLights == 1) then
			hideLights()

		getControlsGroup()

		if(UserOptions.displayFeedback == 1) then
			getFeedback UserOptions.feedbackRadius  UserOptions.createBackground Datas.backgroundFilePath

		createSkyLight()

		setEnvironment UserOptions.createBackground UserOptions.createLighting UserOptions.createReflection Datas.backgroundFilePath Datas.lightingFilePath Datas.reflectionFilePath

		if(UserOptions.displayFeedback == 1) then
			connectFeedbackToSIBLShaders  UserOptions.createBackground UserOptions.createLighting UserOptions.createReflection

		if(UserOptions.createSun == 1 and Datas.sunU != -1 and Datas.sunV != -1) then
			createSun UserOptions.sunLightType Datas.sunColor Datas.sunMultiplier UserOptions.feedbackRadius Datas.sunU Datas.sunV

		if(UserOptions.createLights == 1 and Datas.dynamicLights != "-1") then
			createDynamicLights UserOptions.dynamicLightsType Datas.dynamicLights UserOptions.feedbackRadius

		if(UserOptions.displayFeedback == 1) then
			connectFeedbackToLights()

		if(UserOptions.createGround == 1) then
			createGround UserOptions.feedbackRadius

		if(UserOptions.activateLinearWorkflow == 1) then
			activateLinearWorkflow UserOptions.createBackground

		print (Constants.applicationName + " | '" +  Constants.title + "' file import finished!")

		if(execute(Constants.globalPostProcessCallback) != undefined) then
		(
			print (Constants.applicationName + " | Executing overall postprocess Callback!")
			execute(Constants.globalPostProcessCallback + "()")
		)

		if(execute(Constants.localPostProcessCommand) != undefined) then
		(
			print (Constants.applicationName + " | Executing Template specific postprocess Callback!")
			execute(Constants.localPostProcessCommand + "()")
		)
	)
	else
		messageBox (Constants.applicationName + " | Scanline renderer is not available!") title:(Constants.applicationName + " Error")
)

(
	local proceedSetup = 1
	if(Datas.backgroundFilePath == "-1" or Datas.reflectionFilePath == "-1" or Datas.lightingFilePath == "-1") then
	(
		if not queryBox (Constants.applicationName + " | Non Template compatible Ibl Set provided: Unpredictable results may occur! Would you like to proceed anyway?") beep:false then
			proceedSetup = 0
	)

	if(proceedSetup == 1) then
		setup()
	else
		print (Constants.applicationName + " | '" +  Constants.title + "' file import aborted!")
)
