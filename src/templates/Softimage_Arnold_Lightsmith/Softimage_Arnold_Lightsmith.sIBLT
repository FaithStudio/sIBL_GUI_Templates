[Template]
Name = @Name | Softimage Arnold Lightsmith | String | Template Name
Path = @Path | | String | Template Path
HelpFile = @HelpFile | help/Softimage_Arnold_Lightsmith_Template_Manual.html | String | Help File
Release = @Release | 1.0.3 | String | Template
Date = @Date | 30 December 2011 | String | Date
Author = @Author | Kel Solaar | String | Author
Email = @Email | thomas.mansencal@gmail.com | String | Email
Url = @Url | http://www.thomasmansencal.com/ | String | Url
Software = @Software | Softimage | String | Software
Version = @Version | 2011 - 2012 | String | Version
Renderer = @Renderer | Arnold | String | Renderer
OutputScript = @OutputScript | sIBL_XSI_Import.js | String | Output Script
Comment = @Comment | This is Softimage 2011 - 2012 Arnold Lightsmith Template. | String | Comment

[Ibl Set]
Path = @iblPath | | String | sIBL File Path

[Ibl Set Attributes]
Lightsmith1|LSname = @LightsmithName
Lightsmith1|LSfile = @LightsmithFile
Lightsmith1|LSmaskfile = @LightsmithMaskFile
Lightsmith1|LSwidth = @LightsmithWidth
Lightsmith1|LSheight = @LightsmithHeight
Lightsmith1|LScolor = @LightsmithColor
Lightsmith1|LSmulti = @LightsmithMultiplier
Lightsmith1|LSobjectfile = @LightsmithObjectFile
Lightsmith1|LSframefile = @LightsmithObjectFrameFile
Lightsmith1|LSframecolor = @LightsmithObjectFrameColor
Lightsmith1|LSscale = @LightsmithScale
Lightsmith1|LSshape = @LightsmithShape

[Common Attributes]
sceneSetupPrefix = @sceneSetupPrefix | sIBL | String | Scene Setup Prefix
lightScale = @lightScale | 1 | Float | Light Scale
createLight = @createLight | 1 | Boolean | Create Light
texturedLight = @texturedLight | 0 | Boolean | Textured Light
connectToLights = @connectToLights | 0 | Boolean | Connect To Smart Ibl Lights

[Additional Attributes]
showPassesDialog = @showPassesDialog | 0 | Boolean | Passes Selection Dialog
hideDefaultLight = @hideDefaultLight | 1 | Boolean | Hide Default Light
activateLinearWorkflow = @activateLinearWorkflow | 1 | Boolean | Activate Linear Workflow
useArnoldGammaCorrection = @useArnoldGammaCorrection | 1 | Boolean | Use Arnold Gamma Correction

[Remote Connection]
ConnectionType = @ConnectionType | Socket | String | Connection Type
ExecutionCommand = @ExecutionCommand | $loaderScriptPath | String | Execution Command
DefaultAddress = @DefaultAddress | 127.0.0.1 | Integer | Default Address
DefaultPort = @DefaultPort | 12288 | Integer | Default Port

[Script]
// @OutputScript - @Release for @Software @Version
// Author: @Author
// EMail: @Email
// Homepage: @Url
// Template path: @Path
// Template last modified: @Date
// sIBL_GUI
function __constants()
{
	this.applicationName = "sIBL_GUI";
	this.prefix = "@sceneSetupPrefix";
	this.package = "@Software".replace(" ", "_");
	this.renderer = "@Renderer".replace(" ", "_");
	this.packagePrefix = this.prefix + this.package;
	this.packageRendererPrefix = this.prefix + this.package + this.renderer;
	this.title = "Lightsmith";
	this.controlsTitle = this.title.replace(" ", "_") + "_Controls";
	this.defaultGamma = 2.2;
	if(commandExists("sIBL_XSI_preProcessCommand"))
		this.globalPreProcessCommand = function() {sIBL_XSI_preProcessCommand();};
	else
		this.globalPreProcessCommand = null;
	if(commandExists("sIBL_XSI_postProcessCommand"))
		this.globalPostProcessCommand = function() {sIBL_XSI_postProcessCommand();};
	else
		this.globalPostProcessCommand = null;
	if(commandExists("sIBL_XSI_Arnold_Lightsmith_preProcessCommand"))
		this.localPreProcessCommand = function() {sIBL_XSI_Arnold_Lightsmith_preProcessCommand();};
	else
		this.localPreProcessCommand = null;
	if(commandExists("sIBL_XSI_Arnold_Lightsmith_postProcessCommand"))
		this.localPostProcessCommand = function() {sIBL_XSI_Arnold_Lightsmith_postProcessCommand();};
	else
		this.localPostProcessCommand = null;
}
var Constants = new __constants();

function convertInputColors(color)
{
	if(color == [-1])
		return color;

	for(var i = 0; i < color.length; i++)  
    	color[i] = color[i] / 255.0;

	return color;
}

function __data()
{
	this.resourcesDirectory = "@iblPath".replace(/\\/g,'/').replace(/\/[^\/]*$/, '');
	this.lightName= "@LightsmithName";
	this.lightFilePath = this.resourcesDirectory + "/" + "@LightsmithFile";
	if("@LightsmithMaskFile" != "-1")
		this.lightMaskFilePath =  this.resourcesDirectory + "/" + "@LightsmithMaskFile";
	else
		this.lightMaskFilePath = null;
	this.lightHeight = @LightsmithHeight;
	this.lightWidth = @LightsmithWidth;
	this.lightColor = convertInputColors([@LightsmithColor]);
	for(var i = 0; i < this.lightColor.length; i++)  
    	this.lightColor[i] = this.lightColor[i] * @LightsmithMultiplier;
    this.lightObjectPath = this.resourcesDirectory + "/" + "@LightsmithObjectFile";
	this.lightObjectFramePath = this.resourcesDirectory + "/" + "@LightsmithObjectFrameFile";
	this.lightObjectFrameColor = convertInputColors([@LightsmithObjectFrameColor]);
    this.lightShape = "@LightsmithShape";
}
var Data = new __data();

function __options()
{
	this.lightScale = @lightScale;
	this.createLight = @createLight;
	this.texturedLight = @texturedLight;
	this.connectToLights = @connectToLights;
	this.showPassesDialog = @showPassesDialog;
	this.hideDefaultLight = @hideDefaultLight;
	this.activateLinearWorkflow = @activateLinearWorkflow;
	this.useArnoldGammaCorrection = @useArnoldGammaCorrection;
}
var Options = new __options();

var proceedSetup = true;
if(Data.lightName == "-1")
{
	var result = XSIUIToolkit.Msgbox(Constants.applicationName + " | Non Template compatible Ibl Set provided: Unpredictable results may occur! Would you like to proceed anyway?", siMsgYesNo | siMsgQuestion, Constants.applicationName);
	if (result == siMsgNo )
		proceedSetup = false;
}
if(proceedSetup)
	setup();
else
	LogMessage(Constants.applicationName + " | '" + Constants.title + "' file import aborted!");

function setup()
{
	try
	{
		if(arnoldRendererExists())
		{
			if(Constants.globalPreProcessCommand)
			{
				LogMessage(Constants.applicationName + " | Executing overall preprocess Command!");
				Constants.globalPreProcessCommand()
			}

			if(Constants.localPreProcessCommand)
			{
				LogMessage(Constants.applicationName + " | Executing Template specific preprocess Command!");
				 Constants.localPreProcessCommand()
			}

			// Storing Active Layer.
			var layer = ActiveProject.ActiveScene.ActiveLayer;

			var selectedPasses = [];

			if(Options.showPassesDialog)
				selectedPasses = getPasses();
			else
				selectedPasses[0] = GetCurrentPass();

			if(selectedPasses != null)
			{
				if(selectedPasses.length != 0)
				{
					LogMessage(Constants.applicationName + " | Starting '" + Constants.title + "' file import!");

					 scriptEditorVerbose(false);
					 autoInspectState(false);

					var progressBar = XSIUIToolkit.ProgressBar;
					progressBar.Maximum = 100;
					progressBar.CancelEnabled = false;

					progressBar.Caption = Constants.applicationName + " | Importing '" + Constants.title + "' file!";

					progressBar.Step = 4;
					progressBar.Visible = true;

					// Activating Renderer.
					 setRenderer();
					progressBar.Increment();

					// Hide Default Light.
					if(Options.hideDefaultLight)
						hideDefautLight();
					progressBar.Increment();

					// Linear Workflow Activation.
					if(Options.activateLinearWorkflow)
						activateSceneColorManagement(selectedPasses);
					progressBar.Increment();

					// Creates The Lightsmith Lights.
					// Prepares ImageClips.
					var clipPattern = new RegExp(Data.lightName + "_[0-9]+_Clip");
					var clipMaskPattern = new RegExp(Data.lightName + "_[0-9]+_Mask_Clip");
					var clipsCount = 1;
					var clipsMaskCount = 1;
					var clips = ActiveProject.ActiveScene.ImageClips;
					for (var i=0; i<clips.Count; i++)
					{
						if(clips(i).FullName.match(clipPattern))
							clipsCount++;
						if(clips(i).FullName.match(clipMaskPattern))
							clipsMaskCount++;
					}
					var clipName = Data.lightName + "_" + setPadding(clipsCount.toString(), 3);
					var clipMaskName = Data.lightName + "_" + setPadding(clipsMaskCount.toString(), 3);
					var lightFileClip = getClip(Data.lightFilePath, clipName);
					if(Data.lightMaskFilePath)
						var lightFileMaskClip = getClip(Data.lightMaskFilePath, clipMaskName + "_Mask");
					else
						var lightFileMaskClip = null;
					if(Options.connectToLights)
						connectToLights(lightFileClip, lightFileMaskClip, Data.lightWidth, Data.lightHeight, Data.lightObjectPath, Data.lightObjectFramePath, Data.lightObjectFrameColor, Options.texturedLight);
					else
						getLightsmithLight(getNonClashingName(Data.lightName), lightFileClip, lightFileMaskClip, Data.lightWidth, Data.lightHeight, Data.lightColor, Data.lightObjectPath, Data.lightObjectFramePath, Data.lightObjectFrameColor, Options.lightScale, Data.lightShape, Options.createLight, Options.texturedLight);
					DeleteUnusedImageClips();
					progressBar.Increment();

					progressBar.Visible = false;

					SetCurrentLayer(layer);

					scriptEditorVerbose(true);
					autoInspectState(true);

					LogMessage(Constants.applicationName + " | '" + Constants.title + "' file import finished!");

					if(Constants.globalPostProcessCommand)
					{
						LogMessage(Constants.applicationName + " | Executing overall postprocess Command!");
						Constants.globalPostProcessCommand()
					}

					if(Constants.localPostProcessCommand)
					{
						LogMessage(Constants.applicationName + " | Executing Template specific postprocess Command!");
						Constants.localPostProcessCommand()
					}
				}
				else
				{
					// Restoring Active Layer.
					SetCurrentLayer(layer);

					scriptEditorVerbose(true);
					autoInspectState(true);

					LogMessage(Constants.applicationName + " | No Pass selected, import canceled!");
				}
			}
		}
		else
		{
			var errorMessage = Constants.applicationName + " | Arnold renderer is not available, aborting Loader Script import!"
			XSIUIToolkit.Msgbox(errorMessage, siMsgCritical);
			throw (new Error(errorMessage));
		}
	}
	catch (error)
	{
		scriptEditorVerbose(true);
		autoInspectState(true);

		LogMessage(Constants.applicationName + " | '" + Constants.title + "' file import failed!", siError);
		throw (error)
	}
}

function getPasses()
{
	var passes = new ActiveXObject("XSI.Collection");
	passes.SetAsText("Passes.List.*");

	var passesChooser_customProperty = Application.ActiveSceneRoot.AddCustomProperty("passesChooser_customProperty", false);

	var passParameters = []
	for(var i = 0; i < passes.count; i++)
	{
		passParameters[i] = passesChooser_customProperty.AddParameter3(passes.item(i).name, siBool, true);
	}

	var passesChooser_customProperty_layout = passesChooser_customProperty.PPGLayout;

	passesChooser_customProperty_layout.AddGroup("Scene Passes");
	for(var i = 0; i < passes.count; i++)
	{
		passesChooser_customProperty_layout.AddItem(passes.item(i).name);
	}
	passesChooser_customProperty_layout.EndGroup();
	passesChooser_customProperty_layout.AddRow();
	passesChooser_customProperty_layout.AddGroup("", false, 100);
	passesChooser_customProperty_layout.EndGroup();
	passesChooser_customProperty_layout.AddGroup("Options");
	var button = passesChooser_customProperty_layout.AddButton("ToggleAll", "Toggle All");
	button.SetAttribute(siUICX, 96)
	button = passesChooser_customProperty_layout.AddButton("UnToggleAll", "UnToggle All");
	button.SetAttribute(siUICX, 96)
	passesChooser_customProperty_layout.EndGroup();
	passesChooser_customProperty_layout.EndRow();

	passesChooser_customProperty_layout.Logic = ToggleAll_OnClicked.toString() + UnToggleAll_OnClicked.toString();
	passesChooser_customProperty_layout.Language = "JScript";

	var returnValue = InspectObj(passesChooser_customProperty, "", Constants.applicationName + " Passes Chooser", siModal, false);

	if(!returnValue)
	{
		var selectedPasses = [];
		for(var i = 0; i < passParameters.length; i++)
		{
			if(passParameters[i].value == true)
			{
				selectedPasses[selectedPasses.length] = "Passes." + passParameters[i].name;
			}
		}
		 deleteRequestedProperties("passesChooser_customProperty");
		return selectedPasses;
	}
	else
	{
		 deleteRequestedProperties("passesChooser_customProperty");
		return null;
	}
}

function ToggleAll_OnClicked()
{
	// Starting At 1 To Ignore The PPG Name.
	for(var i = 1; i < PPG.Inspected.Item(0).Parameters.count; i++)
	{
		var boolean = "True";
		PPG.Inspected.Item(0).Parameters(i).value = boolean;
	}
}

function UnToggleAll_OnClicked()
{
	// Starting At 1 To Ignore The PPG Name.
	for(var i = 1; i < PPG.Inspected.Item(0).Parameters.count; i++)
	{
		var boolean = "False";
		PPG.Inspected.Item(0).Parameters(i).value = boolean;
	}
}

function hideDefautLight()
{
	var defaultLight = Application.ActiveSceneRoot.FindChild("light");

	if(defaultLight)
	{
		defaultLight.Properties("visibility").Parameters("viewvis").value = 0;
		defaultLight.Properties("visibility").Parameters("rendvis").value = 0;
	}
}

function getArnoldParametersProperty(object)
{
	var customProperty = object.AddProperty("arnold_parameters", false, "Arnold Parameters");

	customProperty.AddParameter2("opaque", siBool, 1, 0, 1, 0, 5, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("invert_normals", siBool, 0, 0, 1, 0, 5, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("self_shadows", siBool, 1, 0, 1, 0, 5, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("receive_shadows", siBool, 1, 0, 1, 0, 5, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("ray_bias", siFloat, 0.000001, 0.000001, 10, 0.000001, 1, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("sss_use_gi", siBool, 1, 0, 1, 0, 5, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("sss_sample_spacing", siFloat, 0.1, 0, 10, 0, 1, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("sss_max_samples", siUInt4, 1000000, 0, 999999999, 0, 999999999, 0, siPersistable|siAnimatable);

	return customProperty
}

function getArnoldVisibilityProperty(object)
{
	var customProperty = object.AddProperty("arnold_visibility", false, "Arnold Visibility");

	customProperty.AddParameter2("camera", siBool, 1, 0, 1, 0, 5, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("shadows", siBool, 1, 0, 1, 0, 5, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("reflected", siBool, 1, 0, 1, 0, 5, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("refracted", siBool, 1, 0, 1, 0, 5, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("diffuse", siBool, 1, 0, 1, 0, 5, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("glossy", siBool, 1, 0, 1, 0, 5, 0, siPersistable|siAnimatable);

	return customProperty
}

function getArnoldLightDecayFilterProperty(object)
{
	var customProperty = object.AddProperty("light_decay", false, "Arnold Light Decay Filter");

	customProperty.AddParameter2("use_near_atten", siBool, false, null, null, null, null, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("use_far_atten", siBool, false, null, null, null, null, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("near_start", siFloat, 0, -100000, 100000, 0, 500, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("near_end", siFloat, 0, -100000, 100000, 0, 500, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("far_start", siFloat, 0, -100000, 100000, 0, 500, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("far_end", siFloat, 0, -100000, 100000, 0, 500, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("decay_type", siString, "constant", 0, 5, 0, 5, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("decay_radius", siFloat, 1, -100000, 100000, 0, 20, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("decay_clamp", siBool, false, null, null, null, null, 0, siPersistable|siAnimatable);

	return customProperty
}

function getLightControls(object)
{
	var lightControlsProperty = object.AddCustomProperty(Constants.controlsTitle, false);

	lightControlsProperty.AddParameter3("redColor", siDouble, 1);
	lightControlsProperty.AddParameter3("greenColor", siDouble, 1);
	lightControlsProperty.AddParameter3("blueColor", siDouble, 1);
	lightControlsProperty.AddParameter3("alphaColor", siDouble, 1);
	lightControlsProperty.AddParameter3("color", siInt4, 4);
	lightControlsProperty.AddParameter3("redIntensity", siDouble, 1);
	lightControlsProperty.AddParameter3("greenIntensity", siDouble, 1);
	lightControlsProperty.AddParameter3("blueIntensity", siDouble, 1);
	lightControlsProperty.AddParameter3("alphaIntensity", siDouble, 1);
	lightControlsProperty.AddParameter3("intensity", siInt4, 4);
	lightControlsProperty.AddParameter3("redOverride", siDouble, 1);
	lightControlsProperty.AddParameter3("greenOverride", siDouble, 1);
	lightControlsProperty.AddParameter3("blueOverride", siDouble, 1);
	lightControlsProperty.AddParameter3("alphaOverride", siDouble, 1);
	lightControlsProperty.AddParameter3("override", siInt4, 4);
	var lightControlsPropertyLayout = lightControlsProperty.PPGLayout ;
	lightControlsPropertyLayout.AddGroup("General Controls");
		lightControlsPropertyLayout.AddColor("redColor", "Color", true);
		lightControlsPropertyLayout.AddColor("redIntensity", "Intensity", true);
	lightControlsPropertyLayout.EndGroup();
	lightControlsPropertyLayout.AddGroup("Others Controls");
		lightControlsPropertyLayout.AddColor("redOverride", "Override", true);
	lightControlsPropertyLayout.EndGroup();

	return lightControlsProperty;
}

function getLight(clip, name, shape, scaleX, scaleY)
{
	var light = ActiveSceneRoot.AddPrimitive("Light_Box.Preset", name + "_Light");
	var subComponents = ["SX", "SY", "SZ"];
	for(var i = 0; i < subComponents.length; i++)
		light.Primitives("light").Parameters("LightAreaXform" + subComponents[i]).value = 1;

	var lightShader = CreateShaderFromPreset(getShadersPath() + "Shaders/Light/arnold_quad_light", light);
	SIConnectShaderToCnxPoint(lightShader, light + ".LightShader", false);

	var colorMathBasicIntensityShader = getLightShaderBranch(lightShader, clip, name);
	SIConnectShaderToCnxPoint(colorMathBasicIntensityShader, lightShader + ".color", false);

	lightShader.Parameters("intensity").value = 1 / Math.PI;
	lightShader.Parameters("normalize").value = 0;
	lightShader.Parameters("samples").value = 4;

	var globalKinematics = light.Kinematics.Global.Parameters;
	globalKinematics("sclx").value = scaleX;
	globalKinematics("scly").value = scaleY;

	var parameters = ["sclz", "rotx", "roty", "rotz", "posx", "posy", "posz"];
	lockParameters(light, parameters)

	var lightDecayFilterProperty = getArnoldLightDecayFilterProperty(light);
	lightDecayFilterProperty.Parameters("decay_type").value = "quadratic";

	lightShader.Parameters("name").value = name + "_Arnold_Quad_Light";

	return light;
}

function getClip(file, name)
{
	var file = Application.CreateImageClip2(file, name + "_Clip");
	return file;
}

function getClipShaderBranch(container, clip, name)
{
	var imageShader = CreateShaderFromProgID("Softimage.txt2d-image-explicit.1", container);
	SIConnectShaderToCnxPoint(clip, imageShader + ".tex", false);

	imageShader.Parameters("name").value = name + "_Image";

	return imageShader;
}

function getLightShaderBranch(container, clip, name)
{
	var imageShader = getClipShaderBranch(container, clip, name);

	var colorMathBasicSpectrumShader = CreateShaderFromProgID("Softimage.sib_color_math_basic.1", container);
	var subComponents = ["red", "green", "blue"];
	for(var i = 0; i < subComponents.length; i++)
	{
		colorMathBasicSpectrumShader.Parameters("input1").Parameters(subComponents[i]).value = 1;
		colorMathBasicSpectrumShader.Parameters("input2").Parameters(subComponents[i]).value = 1;
	}
	colorMathBasicSpectrumShader.Parameters("op").value = 2;
	SIConnectShaderToCnxPoint(imageShader, colorMathBasicSpectrumShader + ".input1", false);

	var colorMathBasicIntensityShader = CreateShaderFromProgID("Softimage.sib_color_math_basic.1", container);
	var subComponents = ["red", "green", "blue"];
	for(var i = 0; i < subComponents.length; i++)
	{
		colorMathBasicIntensityShader.Parameters("input1").Parameters(subComponents[i]).value = 1;
		colorMathBasicIntensityShader.Parameters("input2").Parameters(subComponents[i]).value = 1;
	}
	colorMathBasicIntensityShader.Parameters("op").value = 2;
	SIConnectShaderToCnxPoint(colorMathBasicSpectrumShader, colorMathBasicIntensityShader + ".input1", false);

	colorMathBasicSpectrumShader.Parameters("name").value = name + "_Spectrum_Color_Math_Basic";
	colorMathBasicIntensityShader.Parameters("name").value = name + "_Intensity_Color_Math_Basic";

	return colorMathBasicIntensityShader;
}

function getSupportShaderBranch(container, inputShader, connectionPorts, clip, name)
{
	var colorMathBasicIntensityShader = getLightShaderBranch(container, clip, name);

	var colorMathBasicModulationShader = CreateShaderFromProgID("Softimage.sib_color_math_basic.1", container);
	var subComponents = ["red", "green", "blue"];
	for(var i = 0; i < subComponents.length; i++)
	{
		colorMathBasicModulationShader.Parameters("input1").Parameters(subComponents[i]).value = 1;
		colorMathBasicModulationShader.Parameters("input2").Parameters(subComponents[i]).value = 1;
	}
	colorMathBasicModulationShader.Parameters("op").value = 2;
	SIConnectShaderToCnxPoint(colorMathBasicIntensityShader, colorMathBasicModulationShader + ".input1", false);

	var colorMathBasicUserShader = CreateShaderFromProgID("Softimage.sib_color_math_basic.1", container);
	for(var i = 0; i < subComponents.length; i++)
	{
		colorMathBasicUserShader.Parameters("input1").Parameters(subComponents[i]).value = 1;
		colorMathBasicUserShader.Parameters("input2").Parameters(subComponents[i]).value = 1;
	}
	colorMathBasicUserShader.Parameters("op").value = 2;
	SIConnectShaderToCnxPoint(colorMathBasicModulationShader,  colorMathBasicUserShader + ".input1", false);

	for(var i = 0; i < connectionPorts.length; i++)
		SIConnectShaderToCnxPoint(colorMathBasicUserShader, inputShader + "." + connectionPorts[i], false);

	colorMathBasicModulationShader.Parameters("name").value = name + "_Modulation_Color_Math_Basic";
	colorMathBasicUserShader.Parameters("name").value = name + "_User_Color_Math_Basic";

	return colorMathBasicModulationShader;
}

function connectDriverToMaterialShaders(driver, driven)
{
	var subComponents = ["red", "green", "blue"];
	for(var i = 0; i < subComponents.length; i++)
	{
		AddExpr(driven.GetAllShaders().Filter("", "", "*_User_Color_Math_Basic")(0).Parameters("input2").Parameters(subComponents[i]).FullName, driver.Parameters(subComponents[i] + "Override").FullName, true);
		AddExpr(driven.GetAllShaders().Filter("", "", "*_Intensity_Color_Math_Basic")(0).Parameters("input2").Parameters(subComponents[i]).FullName, driver.Parameters(subComponents[i] + "Intensity").FullName, true);
		AddExpr(driven.GetAllShaders().Filter("", "", "*_Spectrum_Color_Math_Basic")(0).Parameters("input2").Parameters(subComponents[i]).FullName, driver.Parameters(subComponents[i] + "Color").FullName, true);
	}
}

function connectDriverToLightShaders(driver, driven)
{
	var subComponents = ["red", "green", "blue"];
	for(var i = 0; i < subComponents.length; i++)
	{
		AddExpr(driven.GetAllShaders().Filter("", "", "*_Intensity_Color_Math_Basic")(0).Parameters("input2").Parameters(subComponents[i]).FullName, driver.Parameters(subComponents[i] + "Intensity").FullName, true);
		AddExpr(driven.GetAllShaders().Filter("", "", "*_Spectrum_Color_Math_Basic")(0).Parameters("input2").Parameters(subComponents[i]).FullName, driver.Parameters(subComponents[i] + "Color").FullName, true);
	}
}

function getLightsmithLight(name, lightClip, lightMaskClip, lightWidth, lightHeight, lightColor, lightObject, lightObjectFrame, lightObjectFrameColor, scale, shape, createLight, texturedLight)
{
	var lightRoot = ActiveSceneRoot.AddPrimitive("Null", name + "_Root");
	lightRoot.Primitives("null").Parameters("size").value = truncFloatNumber(3 * ((lightWidth + lightHeight)/2), 0.1);
	lightRoot.Primitives("null").Parameters("primary_icon").value = 5;

	var lightHook = ActiveSceneRoot.AddPrimitive("Null", name + "_Hook");
	lightHook.Primitives("null").Parameters("size").value = truncFloatNumber(2.5 * ((lightWidth + lightHeight)/2), 0.1);
	lightHook.Primitives("null").Parameters("primary_icon").value = 5;
	lightRoot.addChild(lightHook)

	var lightGeometries = ActiveSceneRoot.AddPrimitive("Null", name + "_Geometries");
	lightGeometries.Primitives("null").Parameters("size").value = truncFloatNumber(2 * ((lightWidth + lightHeight)/2), 0.1);
	lightGeometries.Primitives("null").Parameters("primary_icon").value = 5;
	lightHook.addChild(lightGeometries)

	var lightTarget = ActiveSceneRoot.AddPrimitive("Null", name + "_Target");
	var lightGroup = Application.CreateTransformGroup(name, "B:" + lightRoot);
	lightGroup.addChild(lightTarget);

	var depthOffset = 0.01;
	var lightSupport = ObjImport(lightObject, 1, 0, false, true, false, true);
	lightSupport = lightSupport(0);
	lightSupport.Kinematics.Local.Parameters("posz").value = depthOffset;
	var lightSupportParametersProperty = getArnoldParametersProperty(lightSupport);
	if(lightMaskClip != null)
		lightSupportParametersProperty.Parameters("opaque").value = 0;
	var lightSupportVisibilityProperty = getArnoldVisibilityProperty(lightSupport);
	var lightFrame = ObjImport(lightObjectFrame, 1, 0, false, true, false, true);
	lightFrame = lightFrame(0);
	lightFrame.Kinematics.Local.Parameters("posz").value = depthOffset;
	getArnoldParametersProperty(lightFrame);
	getArnoldVisibilityProperty(lightFrame);
	lightGeometries.addChild(lightSupport)
	lightGeometries.addChild(lightFrame)

	var parameters = ["sclx", "scly", "sclz", "rotx", "roty", "rotz", "posx", "posy", "posz"];
	lockParameters(lightSupport, parameters)
	lockParameters(lightFrame, parameters)

	var directionConstraint = ApplyCns("Direction", lightRoot, lightTarget);
	var constraints = lightRoot.Kinematics.Constraints;
	for(var i = 0; i < constraints.Count; i++)
	{
		var constraint = constraints(i);
		if(constraint.Type == "dircns")
		{
			constraint.Parameters("dirx").Value = 0;
			constraint.Parameters("dirz").Value = -1;
			constraint.Parameters("upvct_active").Value = 1;
		}
	}

	var lightSupportMaterial = SICreateMaterial("$XSI_DSPRESETS/Shaders/Material/Constant.Preset", name + "_Material", "", lightSupport);
	getSupportShaderBranch(lightSupportMaterial, lightSupportMaterial + "." + name + "_Material", ["color"], lightClip, name);
	if(lightMaskClip != null)
	{
		var lightMaskShader = getClipShaderBranch(lightSupportMaterial, lightMaskClip, name + "_Mask");
		SIConnectShaderToCnxPoint(lightMaskShader, lightSupportMaterial + "." + name + "_Material.transparency", false);
		lightSupportMaterial.Shaders(0).Parameters("inverttrans").value = 1;
	}

	var lightFrameMaterial = SICreateMaterial(getShadersPath() + "Shaders/Material/standard.Preset", name + "_Frame_Material", "", lightFrame);
	var subComponents = ["red", "green", "blue"];
	for(var i = 0; i < subComponents.length; i++)
		lightFrameMaterial.shaders(0).Parameters("Kd_color").Parameters(subComponents[i]).value = lightObjectFrameColor[i];
	lightFrameMaterial.Shaders(0).Parameters("Kd").value = 1;

	var lightControlsProperty = getLightControls(lightHook);
	connectDriverToMaterialShaders(lightControlsProperty, lightSupportMaterial)

	if(createLight)
	{
		var light = getLight(lightClip, name, shape, lightWidth, lightHeight);
		lightHook.addChild(light);

		lightSupportVisibilityProperty.Parameters("diffuse").value = 0;

		if(texturedLight)
		{
			lightSupportVisibilityProperty.Parameters("glossy").value = 0;
		}
		else
		{
			DisconnectAndDeleteOrUnnestShaders(light.GetAllShaders().Filter("", "", "*_Image")(0), light.Primitives("light"));
			DisconnectAndDeleteOrUnnestShaders(light.AllImageClips.Filter("", "", "*_Clip")(0), light.Primitives("light"));

			var lightNormalizationFactor = getNormalizationFactor(lightColor);
			lightColor = normalizeArray(lightColor);
			lightColorExponent = GetCurrentPass().Properties("Arnold Render Options").Parameters("light_gamma").value;
			lightColor = [Math.pow(lightColor[0], 1 / lightColorExponent), Math.pow(lightColor[1], 1 / lightColorExponent), Math.pow(lightColor[2], 1 / lightColorExponent)];
			lightNormalizationFactor = Math.pow(lightNormalizationFactor, 1 / lightColorExponent);
			for(var i = 0; i < subComponents.length; i++)
			{
				lightControlsProperty.Parameters(subComponents[i] + "Intensity").value = lightNormalizationFactor;
				lightControlsProperty.Parameters(subComponents[i] + "Color").value = lightColor[i];
				lightSupportMaterial.GetAllShaders().Filter("", "", "*_Modulation_Color_Math_Basic")(0).Parameters("input2").Parameters(subComponents[i]).value = (1 / lightNormalizationFactor) * (1 / lightColor[i]);
			}
			light.Primitives("light").Parameters("LightShader").NestedObjects(0).Parameters("affect_specular").value = 0;
		}
		connectDriverToLightShaders(lightControlsProperty, light);
	}

	var parameters = ["sclx", "scly", "sclz"];
	var globalKinematics = lightRoot.Kinematics.Global.Parameters;
	for(var i = 0; i < parameters.length; i++)
		globalKinematics(parameters[i]).value = scale;

	var parameters = ["posx", "posy", "posz"];
	var globalKinematics = lightRoot.Kinematics.Global.Parameters;
	for(var i = 0; i < parameters.length; i++)
		globalKinematics(parameters[i]).value = scale * 5;

	lightSupport.name = name + "_Support";
	lightFrame.name = name + "_Frame";

	return lightGroup;
}

function connectToLights(lightClip, lightMaskClip, lightWidth, lightHeight, lightObjectPath, lightObjectFrame, lightObjectFrameColor, texturedLights)
{
	var controlsGroup = Application.ActiveSceneRoot.FindChild(Constants.prefix);
	if(controlsGroup != null)
	{
		var sIBLLights = controlsGroup.FindChildren("*", siLightPrimType)
		for( var i=0; i<sIBLLights.count; i++ )
		{
			var sIBLLight = sIBLLights.item(i);
			var lightSupport = sIBLLight.FindChild("*_Support*");
			var proceedSetup = true;
			if(lightSupport)
			{
				var result = XSIUIToolkit.Msgbox(Constants.applicationName + " | '" + sIBLLight + "' light has already a Lightsmith setup! Would you like to replace it?", siMsgYesNo | siMsgQuestion, Constants.applicationName);
				if (result == siMsgNo )
					proceedSetup = false;
			}

			if(proceedSetup)
			{
				if(lightSupport)
				{
					var lightRoot = sIBLLight.FindChild("*_Root");
					DeleteObj("B:" + lightRoot);
				}
				var lightShaderRoot = sIBLLight.Primitives("light").Parameters("LightShader");
				var lightShader = lightShaderRoot.NestedObjects(0);
				var lightColor = [1, 1, 1];
				var lightIntensity = 1;
				var hasLightControls = false;
				var lightColorSource = lightShader.Parameters("color").Source;
				if(lightColorSource != null)
				{
					var pattern = new RegExp("_Intensity_Color_Math_Basic");
					if(lightColorSource.name.match(pattern))
					{
						hasLightControls = true;
						lightColor = [lightColorSource.shaders(0).Parameters("input2").Parameters("red").value, lightColorSource.shaders(0).Parameters("input2").Parameters("green").value, lightColorSource.shaders(0).Parameters("input2").Parameters("blue").value];
						lightIntensity = (lightColorSource.Parameters("input2").Parameters("red").value + lightColorSource.Parameters("input2").Parameters("green").value + lightColorSource.Parameters("input2").Parameters("blue").value) / 3;
					}
					else
						RemoveShaderFromCnxPoint(lightColorSource, lightShader.Parameters("color"));
				}
				if(!hasLightControls)
				{
					// Softimage Has Issue Retrieving The Values In Object Model Here.
					lightColor = [GetValue(lightShader.Parameters("color").fullName + ".red"), GetValue(lightShader.Parameters("color").fullName + ".green"), GetValue(lightShader.Parameters("color").fullName + ".blue")];
					lightIntensity = lightShader.Parameters("intensity").value;
				}

				deleteLightShaders(sIBLLight);

				var subComponents = ["SX", "SY", "SZ"];
				for(var j = 0; j < subComponents.length; j++)
					sIBLLight.Primitives("light").Parameters("LightAreaXform" + subComponents[j]).value = 1;

				var colorMathBasicIntensityShader = getLightShaderBranch(lightShaderRoot, lightClip, sIBLLight.FullName);
				SIConnectShaderToCnxPoint(colorMathBasicIntensityShader, lightShader + ".color", false);
				lightShader.Parameters("name").value = sIBLLight.FullName + "_" + lightShader.ProgId.split(".")[1];
				if(!texturedLights)
				{
					DisconnectAndDeleteOrUnnestShaders(sIBLLight.GetAllShaders().Filter("", "", "*_Image")(0), sIBLLight.Primitives("light"));
					DisconnectAndDeleteOrUnnestShaders(sIBLLight.AllImageClips.Filter("", "", "*_Clip")(0), sIBLLight.Primitives("light"));
				}
				subComponents = ["red", "green", "blue"];
				for(var j = 0; j < subComponents.length; j++)
					colorMathBasicIntensityShader.shaders(0).Parameters("input2").Parameters(subComponents[j]).value = lightColor[j];

				var light = getLightsmithLight(sIBLLight.FullName, lightClip, lightMaskClip, lightWidth, lightHeight, lightObjectPath, lightObjectFrame, lightObjectFrameColor, 1, "", false)
				var lightRoot = light.FindChild("*_Root");
				sIBLLight.addChild(lightRoot);

				DeleteObj("B:" + light);

				var averagedSupportSize = (lightWidth + lightHeight) / 2;
				var parameters = ["sclx", "scly", "sclz"];
				var globalKinematics = lightRoot.Kinematics.Global.Parameters;
				for(var j = 0; j < parameters.length; j++)
				{
					sIBLLightAxisScale = sIBLLight.Parameters(parameters[j]).value;
					lightRootAxisScale = globalKinematics(parameters[j]).value;
					globalKinematics(parameters[j]).value = (lightRootAxisScale * ((sIBLLightAxisScale * 2) / averagedSupportSize)) / 2;
				}
				ResetTransform(lightRoot, siObj, siRot, siXYZ);
				ResetTransform(lightRoot, siObj, siTrn, siXYZ);

				var lightSupport = lightRoot.FindChild("*_Support*");
				var lightHookProperties = lightRoot.FindChild("*_Hook").Properties;
				var lightHookProperty = null;
				for(var j = 0; j < lightHookProperties.count; j++)
					if(lightHookProperties.item(j).Name == "Controls")
					{
						lightHookProperty = lightHookProperties.item(j);
						break;
					}

				connectDriverToLightShaders(lightHookProperty, sIBLLight);
				var colorAverage = (lightColor[0] + lightColor[1] + lightColor[2]) / 3;
				var shader = lightSupport.Material.Shaders(0).Shaders.Filter("", "", "*_User_Color_Math_Basic")(0).shaders(0);
				for(var j = 0; j < subComponents.length; j++)
				{
					lightHookProperty.Parameters(subComponents[j] + "Color").value = lightColor[j];
					shader.Parameters("input2").Parameters(subComponents[j]).value = (1 / lightIntensity) * (1 / colorAverage);
				}
			}
		}
	}
	else
		XSIUIToolkit.Msgbox(Constants.applicationName + " | No '" + Constants.prefix + "' group found, skipping Lightsmith lights creation!", siMsgOkOnly, Constants.applicationName);
}

function getNonClashingName(name)
{
	var existingObjects = Application.ActiveSceneRoot.FindChildren("*" + name + "_*_Support");
	var existingObjectsCount = existingObjects.count + 1;
	return name + "_" + setPadding(existingObjectsCount.toString(), 3);
}

function deleteLightShaders(light)
{
	var shaders = light.GetAllShaders();
	var e = new Enumerator(shaders);
	for(; !e.atEnd(); e.moveNext())
	{
		var shader = e.item();
		if(shader.FullName  != light.Primitives("light").Parameters("lightShader").Source)
			DisconnectAndDeleteOrUnnestShaders(shader, light.Primitives("light"));
	}
	var clips = light.AllImageClips;
	var e = new Enumerator(clips);
	for(; !e.atEnd(); e.moveNext())
	{
		DisconnectAndDeleteOrUnnestShaders(e.item(), light.Primitives("light"));
	}
	DeleteUnusedShaders(light.Primitives("light"));
}

function getNormalizationFactor(array)
{
	var normalizationFactor = 0;
	for(var i = 0; i < array.length; i++)
		if(array[i] > normalizationFactor)
			normalizationFactor = array[i];
	return normalizationFactor;
}

function normalizeArray(array)
{
	normalizationFactor = getNormalizationFactor(array);
	for(var i = 0; i < array.length; i++)
		array[i] = array[i] / normalizationFactor;
	return array;
}

function lockParameters(object, parameters)
{
	var globalKinematics = object.Kinematics.Global.Parameters;
	for(var i = 0; i < parameters.length; i++)
		globalKinematics(parameters[i]).SetLock(siLockLevelManipulation);

	localKinematics = object.Kinematics.Local.Parameters;
	for(var i = 0; i < parameters.length; i++)
		localKinematics(parameters[i]).SetLock(siLockLevelManipulation);
}

function arnoldRendererExists()
{
	var e = new Enumerator(Application.Renderers);
	for(; !e.atEnd(); e.moveNext())
		if(e.item().name == "Arnold Render")
			return true
	return false
}

function setRenderer()
{
	SetValue("Passes.RenderOptions.Renderer", "Arnold Render");

	var subComponents = ["red", "green", "blue"];
	for(var i = 0; i < subComponents.length; i++)
		ActiveSceneRoot.Properties.Item("Ambient Lighting").Parameters("ambience").Parameters(subComponents[i]).value = 0;

	SetValue("Views.ViewA.RenderRegion.UsePassOptions,Views.ViewB.RenderRegion.UsePassOptions,Views.ViewC.RenderRegion.UsePassOptions,Views.ViewD.RenderRegion.UsePassOptions", Array(true, true, true, true));
}

function activateSceneColorManagement(passes)
{
	if(Options.useArnoldGammaCorrection)
	{
		var nativeColorManagement = false;
		var gammaValue = Constants.defaultGamma;
	}
	else
	{
		var nativeColorManagement = true;
		var gammaValue = 1;
	}

	Application.Preferences.SetPreferenceValue("Display.color_management_source", 0);
	Application.Preferences.SetPreferenceValue("Display.color_management_render_region", nativeColorManagement);
	Application.Preferences.SetPreferenceValue("Display.color_management_render_preview", nativeColorManagement);
	Application.Preferences.SetPreferenceValue("Display.color_management_shader_balls", nativeColorManagement);
	Application.Preferences.SetPreferenceValue("Display.color_management_ui_colors", nativeColorManagement);

	for(var i = 0; i < passes.length; i++)
	{
		var pass = Dictionary.GetObject(passes[i]);
		pass.Parameters("UseDisplayGammaCorrection").value = nativeColorManagement;
		var parameters = ["output_driver_gamma", "texture_gamma", "light_gamma", "shader_gamma"];
		for(var i = 0; i < parameters.length; i++)
			pass.Properties("Arnold Render Options").Parameters(parameters[i]).value = gammaValue;
	}
}

function getPluginPath()
{
	var plugin = Application.plugins("Arnold Shaders");
	return plugin.OriginPath.replace(/\\/g, "/");
}

function getShadersPath()
{
	return getPluginPath() + "../../Data/DSPresets/";
}

function objectExists(object)
{
	var seekedObject = Application.ActiveSceneRoot.FindChild(object);
	if(seekedObject != null)
		return true
	else
		return false
}

function commandExists(command)
{
	var commands = Application.Commands;

	var e = new Enumerator(commands)
	for( ; !e.atEnd(); e.moveNext() )
	{
		if(e.item() == command)
			return true
	}

	return false
}

function addToDisplayLayer(layerName, object)
{
	var sceneLayers = ActiveProject.ActiveScene.Layers;
	var layerExists = false;

	for(var i = 0; i < sceneLayers.Count; i++)
	{
		if(sceneLayers(i).name == layerName)
		{
			layerExists = true;
			break;
		}
	}

	if(!layerExists)
		CreateLayer(null, layerName, object);
	else
		MoveToLayer("Layers." + layerName, object);
}

function truncFloatNumber(number, truncValue)
{
	if(truncValue != 0)
		return Math.round(number / truncValue) * truncValue;
	else
		return number;
}

function scriptEditorVerbose(verboseState)
{
	Application.Preferences.SetPreferenceValue("scripting.cmdlog", verboseState);
	Application.Preferences.SetPreferenceValue("scripting.msglog", verboseState);
	Application.Preferences.SetPreferenceValue("scripting.msglogverbose", verboseState);
}

function autoInspectState(autoInspectState)
{
	Application.Preferences.SetPreferenceValue("Interaction.autoinspect", autoInspectState);
}

function setPadding(data, padding)
{
	affix="0";
	while( data.length < padding )
		data = affix + data;
	return data;
}

function getRequestedPropertiesAsCollection(propertyType)
{
	var properties = getByClassIDAsCollection("{76332571-D242-11d0-B69C-00AA003B3EA6}");

	if(properties.count != 0)
	{
		var propertiesListAsStringArray = getCollectionAsStringArray(properties);

		var regexPattern = new RegExp(propertyType + "\\w*");

		var requestedProperties = new Array();

		for(var i = 0; i < propertiesListAsStringArray.length; i++)
		{
			var propertyFound = propertiesListAsStringArray[i].match(regexPattern);

			if(propertyFound)
				requestedProperties[requestedProperties.length] = propertiesListAsStringArray[i];
		}

		var requestedPropertiesAsCollection = new ActiveXObject("XSI.Collection");

		if(requestedProperties.length != 0)
			requestedPropertiesAsCollection = getStringArrayAsCollection(requestedProperties);

		return requestedPropertiesAsCollection;
	}
	else
	{
		return 0;
	}
}

function deleteRequestedProperties(propertyType)
{
	var requestedProperties = getRequestedPropertiesAsCollection(propertyType);

	for(var i = 0; i < requestedProperties.count; i++)
		DeleteObj(requestedProperties.item(i));
}

function getByClassIDAsCollection(currentClassID)
{
	var nodesByClassID = new ActiveXObject("XSI.Collection");

	nodesByClassID = FindObjects(null, currentClassID);

	return nodesByClassID;
}

function getCollectionAsStringArray(currentCollection)
{
	var collectionObjectsAsString = currentCollection.GetAsText();
	var collectionObjects = collectionObjectsAsString.split(",");

	return collectionObjects;
}

function getStringArrayAsCollection(currentStringArray)
{
	var stringArrayAsCollection = new ActiveXObject("XSI.Collection");
	stringArrayAsCollection.SetAsText(currentStringArray);

	return stringArrayAsCollection;
}

function extendCollection(initialCollection, extensionCollection)
{
	for(var i = 0; i < extensionCollection.Count; i++)
		initialCollection.Add(extensionCollection(i));
	return initialCollection;
}

function getMatchingObjectsByClassID(classID, pattern, matchExact)
{
	var objectsByClassID = new ActiveXObject("XSI.Collection");
	objectsByClassID = FindObjects(null, classID);
	matchingObjects = new ActiveXObject("XSI.Collection");
	for(var i = 0; i < objectsByClassID.Count; i++)
	{
		if(matchExact)
		{
			if(objectsByClassID(i).name == pattern)
				matchingObjects.Add(objectsByClassID(i));
		}
		else
		{
			if(objectsByClassID(i).name.match(pattern))
				matchingObjects.Add(objectsByClassID(i));
		}
	}
	return matchingObjects;
}