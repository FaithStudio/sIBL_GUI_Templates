[Template]
Name = @Name | Lightsmith | String | Template Name
Path = @Path | | String | Template Path
HelpFile = @HelpFile | help/Softimage_Arnold_Lightsmith Template Manual.html | String | Help File
Release = @Release | 0.9.5 | String | Template Release
Date = @Date | 2 April 2011 | String | Date
Author = @Author | Kel Solaar | String | Author
Email = @Email | thomas.mansencal@gmail.com | String | Email
Url = @Url | http://www.thomasmansencal.com/ | String | Url
Software = @Software | Softimage | String | Software
Version = @Version | 2011 | String | Version
Renderer = @Renderer | Arnold | String | Renderer
OutputScript = @OutputScript | sIBL_XSI_Import.js | String | Output Script
Comment = @Comment | This is Softimage 2011 Arnold Lightsmith Template. | String | Comment

[Ibl Set]
Path = @iblPath | | String | sIBL File Path

[Ibl Set Attributes]
Lightsmith1|LSname = @LightsmithName
Lightsmith1|LSfile = @LightsmithFile
Lightsmith1|LSmaskfile = @LightsmithMaskFile
Lightsmith1|LSwidth = @LightsmithWidth
Lightsmith1|LSheight = @LightsmithHeight
Lightsmith1|LScolor = @LightsmithColor
Lightsmith1|LSobjectfile = @LightsmithObjectFile
Lightsmith1|LSframefile = @LightsmithObjectFrameFile
Lightsmith1|LSObjectFrameColor = @LightsmithObjectFrameColor
Lightsmith1|LSscale = @LightsmithScale
Lightsmith1|LSshape = @LightsmithShape

[Common Attributes]
lightScale = @lightScale | 1 | Float | Light Scale
createLight = @createLight | 1 | Boolean | Create Light
texturedLight = @texturedLight | 0 | Boolean | Textured Light
connectToLights = @connectToLights | 0 | Boolean | Connect To Smart Ibl Lights

[Additional Attributes]
showPassesDialog = @showPassesDialog | 0 | Boolean | Passes Selection Dialog
hideDefaultLight = @hideDefaultLight | 1 | Boolean | Hide Default Light
activateLinearWorkflow = @activateLinearWorkflow | 1 | Boolean | Activate Linear Workflow
useArnoldGammaCorrection = @useArnoldGammaCorrection | 1 | Boolean | Use Arnold Gamma Correction

[Remote Connection]
ConnectionType = @ConnectionType | Socket | String | Connection Type
ExecutionCommand = @ExecutionCommand | $loaderScriptPath | String | ExecutionCommand
DefaultAddress = @DefaultAddress | 127.0.0.1 | Integer | Default Address
DefaultPort = @DefaultPort | 12288 | Integer | Default Port

[Script]
// @OutputScript - @Release For @Software @Version
// Author: @Author
// EMail: @Email
// Homepage: @Url
// Template Path: @Path
// Template Last Modified: @Date
// sIBL_GUI
var resourcesDirectory = "@iblPath".replace(/\\/g,'/').replace(/\/[^\/]*$/, '');
var lightName= "@LightsmithName";
var lightFilePath = resourcesDirectory + "/" + "@LightsmithFile";
if("@LightsmithMaskFile" != "-1")
	var lightMaskFilePath =  resourcesDirectory + "/" + "@LightsmithMaskFile";
else
	var lightMaskFilePath = null;
var lightHeight = @LightsmithHeight;
var lightWidth = @LightsmithWidth;
var lightColor = [@LightsmithColor];
var lightObjectPath = resourcesDirectory + "/" + "@LightsmithObjectFile";
var lightObjectFramePath = resourcesDirectory + "/" + "@LightsmithObjectFrameFile";
var lightObjectFrameColor = [@LightsmithObjectFrameColor];
var lightShape = "@LightsmithShape";
var lightScale = @lightScale;
var createLight = @createLight;
var texturedLight = @texturedLight;
var connectToLights = @connectToLights;
var showPassesDialog = @showPassesDialog;
var hideDefaultLight = @hideDefaultLight;
var activateLinearWorkflow = @activateLinearWorkflow;
var useArnoldGammaCorrection = @useArnoldGammaCorrection;

var proceedSetup = true;
if(lightName == "-1")
{
	var result = XSIUIToolkit.Msgbox( "sIBL_GUI | Non Template Compatible Ibl Set Provided: Unpredictable Results May Occur! Would You Like To Proceed Anyway?", siMsgYesNo | siMsgQuestion, "sIBL_GUI " ) ;
	if (result == siMsgNo )
		proceedSetup = false;
}
if(proceedSetup)
	sIBL_XSI_Arnold_Lightsmith_setup(resourcesDirectory,
							lightName,
							lightFilePath,
							lightMaskFilePath,
							lightHeight,
							lightWidth,
							lightColor,
							lightObjectPath,
							lightObjectFramePath,
							lightObjectFrameColor,
							lightShape,
							lightScale,
							createLight,
							texturedLight,
							connectToLights,
							showPassesDialog,
							hideDefaultLight,
							activateLinearWorkflow,
							useArnoldGammaCorrection);
else
	LogMessage("sIBL_GUI | sIBL File Import Aborted!");

function sIBL_XSI_Arnold_Lightsmith_setup(resourcesDirectory,
							lightName,
							lightFilePath,
							lightMaskFilePath,
							lightHeight,
							lightWidth,
							lightColor,
							lightObjectPath,
							lightObjectFramePath,
							lightObjectFrameColor,
							lightShape,
							lightScale,
							createLight,
							texturedLight,
							connectToLights,
							showPassesDialog,
							hideDefaultLight,
							activateLinearWorkflow,
							useArnoldGammaCorrection)
{
	try
	{
		if(sIBL_XSI_Arnold_Lightsmith_arnoldRendererExists()) 
		{
			if(sIBL_XSI_Arnold_Lightsmith_commandExists("sIBL_XSI_preProcessCommand"))
			{
				LogMessage("sIBL_GUI | Executing Overall Preprocess Command!");
				sIBL_XSI_preProcessCommand();
			}

			if(sIBL_XSI_Arnold_Lightsmith_commandExists(" sIBL_XSI_Arnold_Lightsmith_preProcessCommand"))
			{
				LogMessage("sIBL_GUI | Executing Template Specific Preprocess Command!");
				 sIBL_XSI_Arnold_Lightsmith_preProcessCommand();
			}

			// Storing Active Layer. 
			var layer = ActiveProject.ActiveScene.ActiveLayer;
			
			var selectedPasses = [];
			
			if(showPassesDialog) 
				selectedPasses = sIBL_XSI_Arnold_Lightsmith_getPasses();
			else 
				selectedPasses[0] = GetCurrentPass();
			
			if(selectedPasses != null) 
			{
				if(selectedPasses.length != 0) 
				{
					LogMessage("sIBL_GUI | Starting sIBL File Import!");
					
					 sIBL_XSI_Arnold_Lightsmith_scriptEditorVerbose(false);
					 sIBL_XSI_Arnold_Lightsmith_autoInspectState(false);

					var progressBar = XSIUIToolkit.ProgressBar;
					progressBar.Maximum = 100;
					progressBar.CancelEnabled = false;
					
					progressBar.Caption = "sIBL_GUI | Setting Up sIBL File!";
					
					progressBar.Step = 4;
					progressBar.Visible = true;

					// Activating Renderer.
					 sIBL_XSI_Arnold_Lightsmith_activateArnoldRenderer();
					progressBar.Increment();

					// Hide Default Light.
					if(hideDefaultLight) 
						sIBL_XSI_Arnold_Lightsmith_hideDefautLight();
					progressBar.Increment();

					// Linear Workflow Activation.
					if(activateLinearWorkflow) 
						sIBL_XSI_Arnold_Lightsmith_activateColorManagement(useArnoldGammaCorrection, selectedPasses);
					progressBar.Increment();

					// Creates The Lightsmith Lights.
					// Prepares ImageClips.
					var clipPattern = new RegExp(lightName + "_[0-9]+_Clip");
					var clipMaskPattern = new RegExp(lightName + "_[0-9]+_Mask_Clip");
					var clipsCount = 1;
					var clipsMaskCount = 1;
					var clips = ActiveProject.ActiveScene.ImageClips;
					for (var i=0; i<clips.Count; i++)
					{
						if(clips(i).FullName.match(clipPattern))
							clipsCount++;
						if(clips(i).FullName.match(clipMaskPattern))
							clipsMaskCount++;
					}
					var clipName = lightName + "_" + sIBL_XSI_Arnold_Lightsmith_setPadding(clipsCount.toString(), 3);
					var clipMaskName = lightName + "_" + sIBL_XSI_Arnold_Lightsmith_setPadding(clipsMaskCount.toString(), 3);
					var lightFileClip = sIBL_XSI_Arnold_Lightsmith_getClip(lightFilePath, clipName);
					if(lightMaskFilePath)
						var lightFileMaskClip = sIBL_XSI_Arnold_Lightsmith_getClip(lightMaskFilePath, clipMaskName + "_Mask");
					else
						var lightFileMaskClip = null;
					if(connectToLights)
						sIBL_XSI_Arnold_Lightsmith_connectToLights(lightFileClip, lightFileMaskClip, lightWidth, lightHeight, lightObjectPath, lightObjectFramePath, lightObjectFrameColor, texturedLight);
					else
						sIBL_XSI_Arnold_Lightsmith_getLightsmithLight(sIBL_XSI_Arnold_Lightsmith_getNonClashingName(lightName), lightFileClip, lightFileMaskClip, lightWidth, lightHeight, lightObjectPath, lightObjectFramePath, lightObjectFrameColor, lightScale, lightShape, createLight, texturedLight);
					DeleteUnusedImageClips();
					progressBar.Increment();
										
					progressBar.Visible = false;
					
					SetCurrentLayer(layer);
										
					sIBL_XSI_Arnold_Lightsmith_scriptEditorVerbose(true);
					sIBL_XSI_Arnold_Lightsmith_autoInspectState(true);
					
					LogMessage("sIBL_GUI | sIBL File Import Finished!");

					if(sIBL_XSI_Arnold_Lightsmith_commandExists("sIBL_XSI_postProcessCommand"))
					{
						LogMessage("sIBL_GUI | Executing Overall Postprocess Command!");
						sIBL_XSI_postProcessCommand();
					}

					if(sIBL_XSI_Arnold_Lightsmith_commandExists(" sIBL_XSI_Arnold_Lightsmith_postProcessCommand"))
					{
						LogMessage("sIBL_GUI | Executing Template Specific Postprocess Command!");
						sIBL_XSI_Arnold_Lightsmith_postProcessCommand();
					}
				}
				else 
				{
					// Restoring Active Layer. 
					SetCurrentLayer(layer);
					
					sIBL_XSI_Arnold_Lightsmith_scriptEditorVerbose(true);
					sIBL_XSI_Arnold_Lightsmith_autoInspectState(true);
					
					LogMessage("sIBL_GUI | No Pass Selected, Import Canceled!");
				}
			}
		}
		else 
		{
			var errorMessage = "sIBL_GUI | Arnold Renderer Is Not Available, Aborting Loader Script Import!"
			XSIUIToolkit.Msgbox(errorMessage, siMsgCritical);
			throw (new Error(errorMessage));
		}
	}
	catch (error)
	{
		sIBL_XSI_Arnold_Lightsmith_scriptEditorVerbose(true);
		sIBL_XSI_Arnold_Lightsmith_autoInspectState(true);
		
		LogMessage("sIBL_GUI | sIBL File Import Failed!", siError);
		throw (error)
	}
}

function sIBL_XSI_Arnold_Lightsmith_getPasses()
{
	var passes = new ActiveXObject("XSI.Collection");
	passes.SetAsText("Passes.List.*");
	
	var sIBL_GUI_Passes_Chooser = Application.ActiveSceneRoot.AddCustomProperty("sIBL_GUI_Passes_Chooser", false);
	
	var passParameters = []
	for(var i = 0; i < passes.count; i++) 
	{
		passParameters[i] = sIBL_GUI_Passes_Chooser.AddParameter3(passes.item(i).name, siBool, true);
	}
	
	var sIBL_GUI_Passes_Chooser_Layout = sIBL_GUI_Passes_Chooser.PPGLayout;
	
	sIBL_GUI_Passes_Chooser_Layout.AddGroup("Scene Passes");
	for(var i = 0; i < passes.count; i++) 
	{
		sIBL_GUI_Passes_Chooser_Layout.AddItem(passes.item(i).name);
	}
	sIBL_GUI_Passes_Chooser_Layout.EndGroup();
	sIBL_GUI_Passes_Chooser_Layout.AddRow();
	sIBL_GUI_Passes_Chooser_Layout.AddGroup("", false, 100);
	sIBL_GUI_Passes_Chooser_Layout.EndGroup();
	sIBL_GUI_Passes_Chooser_Layout.AddGroup("Options");
	var button = sIBL_GUI_Passes_Chooser_Layout.AddButton("ToggleAll", "Toggle All");
	button.SetAttribute(siUICX, 96)
	button = sIBL_GUI_Passes_Chooser_Layout.AddButton("UnToggleAll", "UnToggle All");
	button.SetAttribute(siUICX, 96)
	sIBL_GUI_Passes_Chooser_Layout.EndGroup();
	sIBL_GUI_Passes_Chooser_Layout.EndRow();
	
	sIBL_GUI_Passes_Chooser_Layout.Logic = ToggleAll_OnClicked.toString() + UnToggleAll_OnClicked.toString();
	sIBL_GUI_Passes_Chooser_Layout.Language = "JScript";
	
	var returnValue = InspectObj(sIBL_GUI_Passes_Chooser, "", "sIBL GUI Passes Chooser", siModal, false);
	
	if(!returnValue) 
	{
		var selectedPasses = [];
		for(var i = 0; i < passParameters.length; i++) 
		{
			if(passParameters[i].value == true) 
			{
				selectedPasses[selectedPasses.length] = "Passes." + passParameters[i].name;
			}
		}
		 sIBL_XSI_Arnold_Lightsmith_deleteRequestedProperties("sIBL_GUI_Passes_Chooser");
		return selectedPasses;
	}
	else 
	{
		 sIBL_XSI_Arnold_Lightsmith_deleteRequestedProperties("sIBL_GUI_Passes_Chooser");
		return null;
	}
}

function ToggleAll_OnClicked()
{
	// Starting At 1 To Ignore The PPG Name.
	for(var i = 1; i < PPG.Inspected.Item(0).Parameters.count; i++) 
	{
		var boolean = "True";
		PPG.Inspected.Item(0).Parameters(i).value = boolean;
	}
}

function UnToggleAll_OnClicked()
{
	// Starting At 1 To Ignore The PPG Name.
	for(var i = 1; i < PPG.Inspected.Item(0).Parameters.count; i++) 
	{
		var boolean = "False";
		PPG.Inspected.Item(0).Parameters(i).value = boolean;
	}
}

function sIBL_XSI_Arnold_Lightsmith_hideDefautLight()
{
	var defaultLight = Application.ActiveSceneRoot.FindChild("light");
	
	if(defaultLight)
	{
		defaultLight.Properties("visibility").Parameters("viewvis").value = 0;
		defaultLight.Properties("visibility").Parameters("rendvis").value = 0;
	}
}

function sIBL_XSI_Arnold_Lightsmith_getArnoldParametersProperty(object)
{
	var customProperty = object.AddProperty("arnold_parameters", false, "Arnold Parameters");
	
	customProperty.AddParameter2("opaque", siBool, 1, 0, 1, 0, 5, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("invert_normals", siBool, 0, 0, 1, 0, 5, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("self_shadows", siBool, 1, 0, 1, 0, 5, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("receive_shadows", siBool, 1, 0, 1, 0, 5, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("ray_bias", siFloat, 0.000001, 0.000001, 10, 0.000001, 1, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("sss_use_gi", siBool, 1, 0, 1, 0, 5, 0, siPersistable|siAnimatable);   
	customProperty.AddParameter2("sss_sample_spacing", siFloat, 0.1, 0, 10, 0, 1, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("sss_max_samples", siUInt4, 1000000, 0, 999999999, 0, 999999999, 0, siPersistable|siAnimatable);
	
	return customProperty
}

function sIBL_XSI_Arnold_Lightsmith_getArnoldVisibilityProperty(object)
{
	var customProperty = object.AddProperty("arnold_visibility", false, "Arnold Visibility");
	
	customProperty.AddParameter2("camera",    siBool, 1, 0, 1, 0, 5, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("shadows",   siBool, 1, 0, 1, 0, 5, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("reflected", siBool, 1, 0, 1, 0, 5, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("refracted", siBool, 1, 0, 1, 0, 5, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("diffuse",   siBool, 1, 0, 1, 0, 5, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("glossy",    siBool, 1, 0, 1, 0, 5, 0, siPersistable|siAnimatable);	
	
	return customProperty
}

function sIBL_XSI_Arnold_Lightsmith_getArnoldLightDecayFilterProperty(object)
{
	var customProperty = object.AddProperty("light_decay", false, "Arnold Light Decay Filter");

	customProperty.AddParameter2("use_near_atten", siBool, false, null, null, null, null, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("use_far_atten", siBool, false, null, null, null, null, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("near_start", siFloat, 0, -100000, 100000, 0, 500, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("near_end", siFloat, 0, -100000, 100000, 0, 500, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("far_start", siFloat, 0, -100000, 100000, 0, 500, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("far_end", siFloat, 0, -100000, 100000, 0, 500, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("decay_type", siString, "constant", 0, 5, 0, 5, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("decay_radius", siFloat, 1, -100000, 100000, 0, 20, 0, siPersistable|siAnimatable);
	customProperty.AddParameter2("decay_clamp", siBool, false, null, null, null, null, 0, siPersistable|siAnimatable);
		
	return customProperty
}

function sIBL_XSI_Arnold_Lightsmith_getLightControls(object)
{
	var lightControlsProperty = object.AddCustomProperty("Lightsmith_Controls", false);
	
	lightControlsProperty.AddParameter3("redColor", siDouble, 1) ;
	lightControlsProperty.AddParameter3("greenColor", siDouble, 1) ;
	lightControlsProperty.AddParameter3("blueColor", siDouble, 1) ;
	lightControlsProperty.AddParameter3("alphaColor", siDouble, 1) ;
	lightControlsProperty.AddParameter3("color", siInt4, 4) ;
	lightControlsProperty.AddParameter3("redIntensity", siDouble, 1) ;
	lightControlsProperty.AddParameter3("greenIntensity", siDouble, 1) ;
	lightControlsProperty.AddParameter3("blueIntensity", siDouble, 1) ;
	lightControlsProperty.AddParameter3("alphaIntensity", siDouble, 1) ;
	lightControlsProperty.AddParameter3("intensity", siInt4, 4) ;
	lightControlsProperty.AddParameter3("redOverride", siDouble, 1) ;
	lightControlsProperty.AddParameter3("greenOverride", siDouble, 1) ;
	lightControlsProperty.AddParameter3("blueOverride", siDouble, 1) ;
	lightControlsProperty.AddParameter3("alphaOverride", siDouble, 1) ;
	lightControlsProperty.AddParameter3("override", siInt4, 4) ;
	var lightControlsPropertyLayout = lightControlsProperty.PPGLayout ;
	lightControlsPropertyLayout.AddGroup("General Controls") ;
		lightControlsPropertyLayout.AddColor("redColor", "Color", true) ;
		lightControlsPropertyLayout.AddColor("redIntensity", "Intensity", true) ;
	lightControlsPropertyLayout.EndGroup() ;
	lightControlsPropertyLayout.AddGroup("Others Controls") ;
		lightControlsPropertyLayout.AddColor("redOverride", "Override", true) ;
	lightControlsPropertyLayout.EndGroup() ;
	
	return lightControlsProperty;
}

function sIBL_XSI_Arnold_Lightsmith_getLight(clip, name, shape, scaleX, scaleY)
{
	var light = ActiveSceneRoot.AddPrimitive("Light_Box.Preset", name + "_Light");
	var subComponents = ["SX", "SY", "SZ"];
	for(var i = 0; i < subComponents.length; i++) 
		light.Primitives("light").Parameters("LightAreaXform" + subComponents[i]).value = 1;
	
	var lightShader = CreateShaderFromPreset(sIBL_XSI_Arnold_Lightsmith_getShadersPath() + "Shaders/Light/arnold_quad_light", light);
	SIConnectShaderToCnxPoint(lightShader, light + ".LightShader", false);
	
	var colorMathBasicIntensityShader = sIBL_XSI_Arnold_Lightsmith_getLightShaderBranch(lightShader, clip, name);
	SIConnectShaderToCnxPoint(colorMathBasicIntensityShader, lightShader + ".color", false);

	lightShader.Parameters("normalize").value = 0;	
	lightShader.Parameters("samples").value = 4;
	
	var globalKinematics = light.Kinematics.Global.Parameters;
	globalKinematics("sclx").value = scaleX;
	globalKinematics("scly").value = scaleY;
	
	var parameters = ["sclz", "rotx", "roty", "rotz", "posx", "posy", "posz"];
	sIBL_XSI_Arnold_Lightsmith_lockParameters(light, parameters)

	var lightDecayFilterProperty = sIBL_XSI_Arnold_Lightsmith_getArnoldLightDecayFilterProperty(light);
	lightDecayFilterProperty.Parameters("decay_type").value = "quadratic";
	
	lightShader.Parameters("name").value = name + "_Arnold_Quad_Light";	

	return light;
}

function sIBL_XSI_Arnold_Lightsmith_getClip(file, name)
{
	var file = Application.CreateImageClip2(file, name + "_Clip");
	return file;
}

function sIBL_XSI_Arnold_Lightsmith_getClipShaderBranch(container, clip, name)
{	
	var imageShader = CreateShaderFromProgID("Softimage.txt2d-image-explicit.1", container);
	SIConnectShaderToCnxPoint(clip, imageShader + ".tex", false);

	imageShader.Parameters("name").value = name + "_Image";
	
	return imageShader;
}

function sIBL_XSI_Arnold_Lightsmith_getLightShaderBranch(container, clip, name)
{
	var imageShader = sIBL_XSI_Arnold_Lightsmith_getClipShaderBranch(container, clip, name);

	var colorMathBasicSpectrumShader = CreateShaderFromProgID("Softimage.sib_color_math_basic.1", container);
	var subComponents = ["red", "green", "blue"];
	for(var i = 0; i < subComponents.length; i++) 
	{
		colorMathBasicSpectrumShader.Parameters("input1").Parameters(subComponents[i]).value = 1;
		colorMathBasicSpectrumShader.Parameters("input2").Parameters(subComponents[i]).value = 1;
	}
	colorMathBasicSpectrumShader.Parameters("op").value = 2;
	SIConnectShaderToCnxPoint(imageShader, colorMathBasicSpectrumShader + ".input1", false);
	
	var colorMathBasicIntensityShader = CreateShaderFromProgID("Softimage.sib_color_math_basic.1", container);
	var subComponents = ["red", "green", "blue"];
	for(var i = 0; i < subComponents.length; i++) 
	{
		colorMathBasicIntensityShader.Parameters("input1").Parameters(subComponents[i]).value = 1;
		colorMathBasicIntensityShader.Parameters("input2").Parameters(subComponents[i]).value = 1;
	}
	colorMathBasicIntensityShader.Parameters("op").value = 2;
	SIConnectShaderToCnxPoint(colorMathBasicSpectrumShader, colorMathBasicIntensityShader + ".input1", false);
	
	colorMathBasicSpectrumShader.Parameters("name").value = name + "_Spectrum_Color_Math_Basic";
	colorMathBasicIntensityShader.Parameters("name").value = name + "_Intensity_Color_Math_Basic";

	return colorMathBasicIntensityShader;
}
	
function sIBL_XSI_Arnold_Lightsmith_getSupportShaderBranch(container, inputShader, connectionPorts, clip, name)
{
	var colorMathBasicIntensityShader = sIBL_XSI_Arnold_Lightsmith_getLightShaderBranch(container, clip, name);
	
	var colorMathBasicModulationShader = CreateShaderFromProgID("Softimage.sib_color_math_basic.1", container);
	var subComponents = ["red", "green", "blue"];
	for(var i = 0; i < subComponents.length; i++) 
	{
		colorMathBasicModulationShader.Parameters("input1").Parameters(subComponents[i]).value = 1;
		colorMathBasicModulationShader.Parameters("input2").Parameters(subComponents[i]).value = 1;
	}
	colorMathBasicModulationShader.Parameters("op").value = 2;
	SIConnectShaderToCnxPoint(colorMathBasicIntensityShader, colorMathBasicModulationShader + ".input1", false);

	var colorMathBasicUserShader = CreateShaderFromProgID("Softimage.sib_color_math_basic.1", container);
	for(var i = 0; i < subComponents.length; i++) 
	{
		colorMathBasicUserShader.Parameters("input1").Parameters(subComponents[i]).value = 1;
		colorMathBasicUserShader.Parameters("input2").Parameters(subComponents[i]).value = 1;
	}
	colorMathBasicUserShader.Parameters("op").value = 2;
	SIConnectShaderToCnxPoint(colorMathBasicModulationShader,  colorMathBasicUserShader + ".input1", false);
	
	for(var i = 0; i < connectionPorts.length; i++) 
		SIConnectShaderToCnxPoint(colorMathBasicUserShader, inputShader + "." + connectionPorts[i], false);
	
	colorMathBasicModulationShader.Parameters("name").value = name + "_Modulation_Color_Math_Basic";
	colorMathBasicUserShader.Parameters("name").value = name + "_User_Color_Math_Basic";

	return colorMathBasicModulationShader;
}

function sIBL_XSI_Arnold_Lightsmith_connectDriverToMaterialShaders(driver, driven)
{
	var subComponents = ["red", "green", "blue"];
	for(var i = 0; i < subComponents.length; i++)
	{	
		AddExpr(driven.GetAllShaders().Filter("", "", "*_User_Color_Math_Basic")(0).Parameters("input2").Parameters(subComponents[i]).FullName, driver.Parameters(subComponents[i] + "Override").FullName, true);
		AddExpr(driven.GetAllShaders().Filter("", "", "*_Intensity_Color_Math_Basic")(0).Parameters("input2").Parameters(subComponents[i]).FullName, driver.Parameters(subComponents[i] + "Intensity").FullName, true);
		AddExpr(driven.GetAllShaders().Filter("", "", "*_Spectrum_Color_Math_Basic")(0).Parameters("input2").Parameters(subComponents[i]).FullName, driver.Parameters(subComponents[i] + "Color").FullName, true);
	}
}

function sIBL_XSI_Arnold_Lightsmith_connectDriverToLightShaders(driver, driven)
{
	var subComponents = ["red", "green", "blue"];
	for(var i = 0; i < subComponents.length; i++)
	{
		AddExpr(driven.GetAllShaders().Filter("", "", "*_Intensity_Color_Math_Basic")(0).Parameters("input2").Parameters(subComponents[i]).FullName, driver.Parameters(subComponents[i] + "Intensity").FullName, true);
		AddExpr(driven.GetAllShaders().Filter("", "", "*_Spectrum_Color_Math_Basic")(0).Parameters("input2").Parameters(subComponents[i]).FullName, driver.Parameters(subComponents[i] + "Color").FullName, true);
	}
}

function sIBL_XSI_Arnold_Lightsmith_getLightsmithLight(name, lightClip, lightMaskClip, lightWidth, lightHeight, lightObject, lightObjectFrame, lightObjectFrameColor, scale, shape, createLight, texturedLight)
{
	var lightRoot = ActiveSceneRoot.AddPrimitive("Null", name + "_Root");
	lightRoot.Primitives("null").Parameters("size").value = sIBL_XSI_Arnold_Lightsmith_truncFloatNumber(3 * ((lightWidth + lightHeight)/2), 0.1);
	lightRoot.Primitives("null").Parameters("primary_icon").value = 5;

	var lightHook = ActiveSceneRoot.AddPrimitive("Null", name + "_Hook");
	lightHook.Primitives("null").Parameters("size").value = sIBL_XSI_Arnold_Lightsmith_truncFloatNumber(2.5 * ((lightWidth + lightHeight)/2), 0.1);
	lightHook.Primitives("null").Parameters("primary_icon").value = 5;
	lightRoot.addChild(lightHook)

	var lightGeometries = ActiveSceneRoot.AddPrimitive("Null", name + "_Geometries");
	lightGeometries.Primitives("null").Parameters("size").value = sIBL_XSI_Arnold_Lightsmith_truncFloatNumber(2 * ((lightWidth + lightHeight)/2), 0.1);
	lightGeometries.Primitives("null").Parameters("primary_icon").value = 5;
	lightHook.addChild(lightGeometries)

	var lightTarget = ActiveSceneRoot.AddPrimitive("Null", name + "_Target");
	var lightGroup = Application.CreateTransformGroup(name, "B:" + lightRoot);
	lightGroup.addChild(lightTarget);
	
	var depthOffset = 0.01;
	var lightSupport = ObjImport(lightObject, 1, 0, false, true, false, true);	
	lightSupport = lightSupport(0);
	lightSupport.Kinematics.Local.Parameters("posz").value = depthOffset;
	var lightSupportParametersProperty = sIBL_XSI_Arnold_Lightsmith_getArnoldParametersProperty(lightSupport);
	if(lightMaskClip != null)
		lightSupportParametersProperty.Parameters("opaque").value = 0;
	var lightSupportVisibilityProperty = sIBL_XSI_Arnold_Lightsmith_getArnoldVisibilityProperty(lightSupport);
	var lightFrame = ObjImport(lightObjectFrame, 1, 0, false, true, false, true);
	lightFrame = lightFrame(0);
	lightFrame.Kinematics.Local.Parameters("posz").value = depthOffset;
	sIBL_XSI_Arnold_Lightsmith_getArnoldParametersProperty(lightFrame);
	sIBL_XSI_Arnold_Lightsmith_getArnoldVisibilityProperty(lightFrame);
	lightGeometries.addChild(lightSupport)
	lightGeometries.addChild(lightFrame)
	
	var parameters = ["sclx", "scly", "sclz", "rotx", "roty", "rotz", "posx", "posy", "posz"];
	sIBL_XSI_Arnold_Lightsmith_lockParameters(lightSupport, parameters)
	sIBL_XSI_Arnold_Lightsmith_lockParameters(lightFrame, parameters)

	var directionConstraint = ApplyCns("Direction", lightRoot, lightTarget);
	var constraints = lightRoot.Kinematics.Constraints;
	for(var i = 0; i < constraints.Count; i++) 
	{	
		var constraint = constraints(i);
		if(constraint.Type == "dircns") 
		{
			constraint.Parameters("dirx").Value = 0;
			constraint.Parameters("dirz").Value = -1;
			constraint.Parameters("upvct_active").Value = 1;
		}
	}
	
	var lightSupportMaterial = SICreateMaterial("$XSI_DSPRESETS/Shaders/Material/Constant.Preset", name + "_Material", "", lightSupport);
	sIBL_XSI_Arnold_Lightsmith_getSupportShaderBranch(lightSupportMaterial, lightSupportMaterial + "." + name + "_Material", ["color"], lightClip, name);
	if(lightMaskClip != null)
	{
		var lightMaskShader = sIBL_XSI_Arnold_Lightsmith_getClipShaderBranch(lightSupportMaterial, lightMaskClip, name + "_Mask");
		SIConnectShaderToCnxPoint(lightMaskShader, lightSupportMaterial + "." + name + "_Material.transparency", false);
		lightSupportMaterial.Shaders(0).Parameters("inverttrans").value = 1;
	}
	
	var lightFrameMaterial = SICreateMaterial(sIBL_XSI_Arnold_Lightsmith_getShadersPath() + "Shaders/Material/standard.Preset", name + "_Frame_Material", "", lightFrame);
	var subComponents = ["red", "green", "blue"];
	for(var i = 0; i < subComponents.length; i++) 
		lightFrameMaterial.shaders(0).Parameters("Kd_color").Parameters(subComponents[i]).value = lightObjectFrameColor[i];
	lightFrameMaterial.Shaders(0).Parameters("Kd").value = 1;
	
	var lightControlsProperty = sIBL_XSI_Arnold_Lightsmith_getLightControls(lightHook);
	sIBL_XSI_Arnold_Lightsmith_connectDriverToMaterialShaders(lightControlsProperty, lightSupportMaterial)
	
	if(createLight)
	{
		var light = sIBL_XSI_Arnold_Lightsmith_getLight(lightClip, name, shape, lightWidth, lightHeight);
		lightHook.addChild(light);
		
		lightSupportVisibilityProperty.Parameters("diffuse").value = 0;
		
		if(texturedLight)
		{
			lightSupportVisibilityProperty.Parameters("glossy").value = 0;
		}
		else
		{
			DisconnectAndDeleteOrUnnestShaders(light.GetAllShaders().Filter("", "", "*_Image")(0), light.Primitives("light"));
			DisconnectAndDeleteOrUnnestShaders(light.AllImageClips.Filter("", "", "*_Clip")(0), light.Primitives("light"));
			
			var lightNormalizationFactor = sIBL_XSI_Arnold_Lightsmith_getNormalizationFactor(lightColor);	
			lightColor = sIBL_XSI_Arnold_Lightsmith_normalizeArray(lightColor);
			lightColorExponent = GetCurrentPass().Properties("Arnold Render Options").Parameters("light_gamma").value;
			lightColor = [Math.pow(lightColor[0], 1 / lightColorExponent), Math.pow(lightColor[1], 1 / lightColorExponent), Math.pow(lightColor[2], 1 / lightColorExponent)];
			lightNormalizationFactor = Math.pow(lightNormalizationFactor, 1 / lightColorExponent);
			for(var i = 0; i < subComponents.length; i++)
			{
				lightControlsProperty.Parameters(subComponents[i] + "Intensity").value = lightNormalizationFactor;
				lightControlsProperty.Parameters(subComponents[i] + "Color").value = lightColor[i];
				lightSupportMaterial.GetAllShaders().Filter("", "", "*_Modulation_Color_Math_Basic")(0).Parameters("input2").Parameters(subComponents[i]).value = (1 / lightNormalizationFactor) * (1 / lightColor[i]);
			}
			light.Primitives("light").Parameters("LightShader").NestedObjects(0).Parameters("affect_specular").value = 0;
		}
		sIBL_XSI_Arnold_Lightsmith_connectDriverToLightShaders(lightControlsProperty, light);
	}

	var parameters = ["sclx", "scly", "sclz"];
	var globalKinematics = lightRoot.Kinematics.Global.Parameters;
	for(var i = 0; i < parameters.length; i++) 
		globalKinematics(parameters[i]).value = scale;

	var parameters = ["posx", "posy", "posz"];
	var globalKinematics = lightRoot.Kinematics.Global.Parameters;
	for(var i = 0; i < parameters.length; i++) 
		globalKinematics(parameters[i]).value = scale * 5;

	lightSupport.name = name + "_Support";
	lightFrame.name = name + "_Frame";
	
	return lightGroup;
}

function sIBL_XSI_Arnold_Lightsmith_connectToLights(lightClip, lightMaskClip, lightWidth, lightHeight, lightObjectPath, lightObjectFrame, lightObjectFrameColor, texturedLights)
{
	var sceneSIBLGroup = Application.ActiveSceneRoot.FindChild("sIBL");
	if(sceneSIBLGroup != null) 
	{	
		var sIBLLights = sceneSIBLGroup.FindChildren("*", siLightPrimType)
		for( var i=0; i<sIBLLights.count; i++ )
		{
			var sIBLLight = sIBLLights.item(i);
			var lightSupport = sIBLLight.FindChild("*_Support*");
			var proceedSetup = true;
			if(lightSupport)
			{
				var result = XSIUIToolkit.Msgbox( "sIBL_GUI | '" + sIBLLight + "' Light Has Already An Lightsmith Setup! Would You Like To Replace It?", siMsgYesNo | siMsgQuestion, "sIBL_GUI " ) ;
				if (result == siMsgNo )
					proceedSetup = false;
			}

			if(proceedSetup)
			{	
				if(lightSupport)
				{
					var lightRoot = sIBLLight.FindChild("*_Root");
					DeleteObj("B:" + lightRoot);
				}
				var lightShaderRoot = sIBLLight.Primitives("light").Parameters("LightShader");
				var lightShader = lightShaderRoot.NestedObjects(0);
				var lightColor = [1, 1, 1];
				var lightIntensity = 1;
				var hasLightControls = false;
				var lightColorSource = lightShader.Parameters("color").Source;
				if(lightColorSource != null)
				{
					var pattern = new RegExp("_Intensity_Color_Math_Basic");
					if(lightColorSource.name.match(pattern))
					{
						hasLightControls = true;
						lightColor = [lightColorSource.shaders(0).Parameters("input2").Parameters("red").value, lightColorSource.shaders(0).Parameters("input2").Parameters("green").value, lightColorSource.shaders(0).Parameters("input2").Parameters("blue").value];
						lightIntensity = (lightColorSource.Parameters("input2").Parameters("red").value + lightColorSource.Parameters("input2").Parameters("green").value + lightColorSource.Parameters("input2").Parameters("blue").value) / 3;
					}	
					else
						RemoveShaderFromCnxPoint(lightColorSource, lightShader.Parameters("color"));
				}
				if(!hasLightControls)
				{
					// Softimage Has Issue Retrieving The Values In Object Model Here.
					lightColor = [GetValue(lightShader.Parameters("color").fullName + ".red"), GetValue(lightShader.Parameters("color").fullName + ".green"), GetValue(lightShader.Parameters("color").fullName + ".blue")];
					lightIntensity = lightShader.Parameters("intensity").value;
				}
					
				sIBL_XSI_Arnold_Lightsmith_deleteLightShaders(sIBLLight);
				
				var subComponents = ["SX", "SY", "SZ"];
				for(var j = 0; j < subComponents.length; j++) 
					sIBLLight.Primitives("light").Parameters("LightAreaXform" + subComponents[j]).value = 1;

				var colorMathBasicIntensityShader = sIBL_XSI_Arnold_Lightsmith_getLightShaderBranch(lightShaderRoot, lightClip, sIBLLight.FullName);
				SIConnectShaderToCnxPoint(colorMathBasicIntensityShader, lightShader + ".color", false);
				lightShader.Parameters("name").value = sIBLLight.FullName + "_" + lightShader.ProgId.split(".")[1];
				if(!texturedLights)
				{
					DisconnectAndDeleteOrUnnestShaders(sIBLLight.GetAllShaders().Filter("", "", "*_Image")(0), sIBLLight.Primitives("light"));
					DisconnectAndDeleteOrUnnestShaders(sIBLLight.AllImageClips.Filter("", "", "*_Clip")(0), sIBLLight.Primitives("light"));
				}
				subComponents = ["red", "green", "blue"];
				for(var j = 0; j < subComponents.length; j++) 
					colorMathBasicIntensityShader.shaders(0).Parameters("input2").Parameters(subComponents[j]).value = lightColor[j];
				
				var light = sIBL_XSI_Arnold_Lightsmith_getLightsmithLight(sIBLLight.FullName, lightClip, lightMaskClip, lightWidth, lightHeight, lightObjectPath, lightObjectFrame, lightObjectFrameColor, 1, "", false)
				var lightRoot = light.FindChild("*_Root");
				sIBLLight.addChild(lightRoot);
				
				DeleteObj("B:" + light);

				var averagedSupportSize = (lightWidth + lightHeight) / 2;
				var parameters = ["sclx", "scly", "sclz"];
				var globalKinematics = lightRoot.Kinematics.Global.Parameters;
				for(var j = 0; j < parameters.length; j++) 
				{
					sIBLLightAxisScale = sIBLLight.Parameters(parameters[j]).value;
					lightRootAxisScale = globalKinematics(parameters[j]).value;
					globalKinematics(parameters[j]).value = (lightRootAxisScale * ((sIBLLightAxisScale * 2) / averagedSupportSize)) / 2;
				}
				ResetTransform(lightRoot, siObj, siRot, siXYZ);
				ResetTransform(lightRoot, siObj, siTrn, siXYZ);

				var lightSupport = lightRoot.FindChild("*_Support*");
				var lightHookProperties = lightRoot.FindChild("*_Hook").Properties;
				var lightHookProperty = null;
				for(var j = 0; j < lightHookProperties.count; j++)
					if(lightHookProperties.item(j).Name == "Lightsmith_Controls")
					{
						lightHookProperty = lightHookProperties.item(j);
						break;
					}

				sIBL_XSI_Arnold_Lightsmith_connectDriverToLightShaders(lightHookProperty, sIBLLight);
				var colorAverage = (lightColor[0] + lightColor[1] + lightColor[2]) / 3;
				var shader = lightSupport.Material.Shaders(0).Shaders.Filter("", "", "*_User_Color_Math_Basic")(0).shaders(0);
				for(var j = 0; j < subComponents.length; j++) 
				{
					lightHookProperty.Parameters(subComponents[j] + "Color").value = lightColor[j];
					shader.Parameters("input2").Parameters(subComponents[j]).value = (1 / lightIntensity) * (1 / colorAverage);
				}
			}
		}
	}
	else
		XSIUIToolkit.Msgbox( "sIBL_GUI | No 'sIBL' Group Found, Skipping Lightsmith Lights Creation!", siMsgOkOnly, "sIBL_GUI " );
}

function sIBL_XSI_Arnold_Lightsmith_getNonClashingName(name)
{
	var existingObjects = Application.ActiveSceneRoot.FindChildren("*" + name + "_*_Support");
	var existingObjectsCount = existingObjects.count + 1;
	return name + "_" + sIBL_XSI_Arnold_Lightsmith_setPadding(existingObjectsCount.toString(), 3);
}

function sIBL_XSI_Arnold_Lightsmith_deleteLightShaders(light)
{
	var shaders = light.GetAllShaders();
	var e = new Enumerator(shaders);
	for(; !e.atEnd(); e.moveNext())
	{
		var shader = e.item();
		if(shader.FullName  != light.Primitives("light").Parameters("lightShader").Source)
			DisconnectAndDeleteOrUnnestShaders(shader, light.Primitives("light"));
	}
	var clips = light.AllImageClips;
	var e = new Enumerator(clips);
	for(; !e.atEnd(); e.moveNext())
	{
		DisconnectAndDeleteOrUnnestShaders(e.item(), light.Primitives("light"));
	}
	DeleteUnusedShaders(light.Primitives("light"));
}

function sIBL_XSI_Arnold_Lightsmith_getNormalizationFactor(array)
{
	var normalizationFactor = 0;
	for(var i = 0; i < array.length; i++)
		if(array[i] > normalizationFactor)
			normalizationFactor = array[i];
	return normalizationFactor;
}

function sIBL_XSI_Arnold_Lightsmith_normalizeArray(array)
{
	normalizationFactor = sIBL_XSI_Arnold_Lightsmith_getNormalizationFactor(array);
	for(var i = 0; i < array.length; i++)
		array[i] = array[i] / normalizationFactor;
	return array;
}

function sIBL_XSI_Arnold_Lightsmith_lockParameters(object, parameters)
{
	var globalKinematics = object.Kinematics.Global.Parameters;
	for(var i = 0; i < parameters.length; i++) 
		globalKinematics(parameters[i]).SetLock(siLockLevelManipulation);
		
	localKinematics = object.Kinematics.Local.Parameters;
	for(var i = 0; i < parameters.length; i++) 
		localKinematics(parameters[i]).SetLock(siLockLevelManipulation);
}

function sIBL_XSI_Arnold_Lightsmith_arnoldRendererExists()
{
	var e = new Enumerator(Application.Renderers);
	for(; !e.atEnd(); e.moveNext()) 
		if(e.item().name == "Arnold Render") 
			return true
	return false
}

function sIBL_XSI_Arnold_Lightsmith_activateArnoldRenderer()
{
	SetValue("Passes.RenderOptions.Renderer", "Arnold Render");
	
	var subComponents = ["red", "green", "blue"];
	for(var i = 0; i < subComponents.length; i++) 
		ActiveSceneRoot.Properties.Item("Ambient Lighting").Parameters("ambience").Parameters(subComponents[i]).value = 0;
	
	SetValue("Views.ViewA.RenderRegion.UsePassOptions,Views.ViewB.RenderRegion.UsePassOptions,Views.ViewC.RenderRegion.UsePassOptions,Views.ViewD.RenderRegion.UsePassOptions", Array(true, true, true, true));
}

function sIBL_XSI_Arnold_Lightsmith_activateColorManagement(useArnoldGammaCorrection, passes)
{
	if(useArnoldGammaCorrection) 
	{
		var nativeColorManagement = false;
		var gammaValue = 2.2;
	}
	else 
	{
		var nativeColorManagement = true;
		var gammaValue = 1;
	}
	
	Application.Preferences.SetPreferenceValue("Display.color_management_source", 0);
	Application.Preferences.SetPreferenceValue("Display.color_management_render_region", nativeColorManagement);
	Application.Preferences.SetPreferenceValue("Display.color_management_render_preview", nativeColorManagement);
	Application.Preferences.SetPreferenceValue("Display.color_management_shader_balls", nativeColorManagement);
	Application.Preferences.SetPreferenceValue("Display.color_management_ui_colors", nativeColorManagement);
		
	for(var i = 0; i < passes.length; i++) 
	{
		var pass = Dictionary.GetObject(passes[i]);
		pass.Parameters("UseDisplayGammaCorrection").value = nativeColorManagement;
		var parameters = ["output_driver_gamma", "texture_gamma", "light_gamma", "shader_gamma"];
		for(var i = 0; i < parameters.length; i++) 
			pass.Properties("Arnold Render Options").Parameters(parameters[i]).value = gammaValue;
	}
}

function sIBL_XSI_Arnold_Lightsmith_getPluginPath()
{
	var plugin = Application.plugins("Arnold Shaders");
	return plugin.OriginPath.replace(/\\/g, "/");
}

function sIBL_XSI_Arnold_Lightsmith_getShadersPath()
{
	return sIBL_XSI_Arnold_Lightsmith_getPluginPath() + "../../Data/DSPresets/";
}

function sIBL_XSI_Arnold_Lightsmith_objectExists(object)
{
	var seekedObject = Application.ActiveSceneRoot.FindChild(object);
	if(seekedObject != null) 
		return true
	else 
		return false
}

function sIBL_XSI_Arnold_Lightsmith_commandExists(command)
{
	var commands = Application.Commands;

	var e = new Enumerator(commands)
	for( ; !e.atEnd(); e.moveNext() )
	{
		if(e.item() == command)
			return true
	}

	return false
}

function sIBL_XSI_Arnold_Lightsmith_addToDisplayLayer(layerName, object)
{
	var sceneLayers = ActiveProject.ActiveScene.Layers;
	var layerExists = false;
	
	for(var i = 0; i < sceneLayers.Count; i++) 
	{
		if(sceneLayers(i).name == layerName) 
		{
			layerExists = true;
			break;
		}
	}
	
	if(!layerExists) 
		CreateLayer(null, layerName, object);
	else 
		MoveToLayer("Layers." + layerName, object);
}

function sIBL_XSI_Arnold_Lightsmith_truncFloatNumber(number, truncValue)
{
	if(truncValue != 0)
		return Math.round(number / truncValue) * truncValue; 
	else
		return number;
}

function sIBL_XSI_Arnold_Lightsmith_scriptEditorVerbose(verboseState)
{
	Application.Preferences.SetPreferenceValue("scripting.cmdlog", verboseState);
	Application.Preferences.SetPreferenceValue("scripting.msglog", verboseState);
	Application.Preferences.SetPreferenceValue("scripting.msglogverbose", verboseState);
}

function sIBL_XSI_Arnold_Lightsmith_autoInspectState(autoInspectState)
{
	Application.Preferences.SetPreferenceValue("Interaction.autoinspect", autoInspectState);
}

function sIBL_XSI_Arnold_Lightsmith_setPadding(data, padding)
{
	affix="0";
	while( data.length < padding )
		data = affix + data;
	return data;
}
	
function sIBL_XSI_Arnold_Lightsmith_getRequestedPropertiesAsCollection(propertyType)
{
	var properties = sIBL_XSI_Arnold_Lightsmith_getByClassIDAsCollection("{76332571-D242-11d0-B69C-00AA003B3EA6}");
	
	if(properties.count != 0) 
	{
		var propertiesListAsStringArray = sIBL_XSI_Arnold_Lightsmith_getCollectionAsStringArray(properties);
		
		var regexPattern = new RegExp(propertyType + "\\w*");
		
		var requestedProperties = new Array();
		
		for(var i = 0; i < propertiesListAsStringArray.length; i++) 
		{
			var propertyFound = propertiesListAsStringArray[i].match(regexPattern);
			
			if(propertyFound) 
				requestedProperties[requestedProperties.length] = propertiesListAsStringArray[i];
		}
		
		var requestedPropertiesAsCollection = new ActiveXObject("XSI.Collection");
		
		if(requestedProperties.length != 0) 
			requestedPropertiesAsCollection = sIBL_XSI_Arnold_Lightsmith_getStringArrayAsCollection(requestedProperties);
		
		return requestedPropertiesAsCollection;
	}
	else 
	{
		return 0;
	}
}

function sIBL_XSI_Arnold_Lightsmith_deleteRequestedProperties(propertyType)
{
	var requestedProperties = sIBL_XSI_Arnold_Lightsmith_getRequestedPropertiesAsCollection(propertyType);
	
	for(var i = 0; i < requestedProperties.count; i++) 
		DeleteObj(requestedProperties.item(i));
}

function sIBL_XSI_Arnold_Lightsmith_getByClassIDAsCollection(currentClassID)
{
	var nodesByClassID = new ActiveXObject("XSI.Collection");
	
	nodesByClassID = FindObjects(null, currentClassID);
	
	return nodesByClassID;
}

function sIBL_XSI_Arnold_Lightsmith_getCollectionAsStringArray(currentCollection)
{
	var collectionObjectsAsString = currentCollection.GetAsText();
	var collectionObjects = collectionObjectsAsString.split(",");
	
	return collectionObjects;
}

function sIBL_XSI_Arnold_Lightsmith_getStringArrayAsCollection(currentStringArray)
{
	var stringArrayAsCollection = new ActiveXObject("XSI.Collection");
	stringArrayAsCollection.SetAsText(currentStringArray);
	
	return stringArrayAsCollection;
}

function sIBL_XSI_Arnold_Lightsmith_extendCollection(initialCollection, extensionCollection)
{
	for(var i = 0; i < extensionCollection.Count; i++) 
		initialCollection.Add(extensionCollection(i));
	return initialCollection;
}

function sIBL_XSI_Arnold_Lightsmith_getMatchingObjectsByClassID(classID, pattern, matchExact)
{
	var objectsByClassID = new ActiveXObject("XSI.Collection");
	objectsByClassID = FindObjects(null, classID);
	matchingObjects = new ActiveXObject("XSI.Collection");
	for(var i = 0; i < objectsByClassID.Count; i++) 
	{
		if(matchExact) 
		{
			if(objectsByClassID(i).name == pattern) 
				matchingObjects.Add(objectsByClassID(i));
		}
		else 
		{
			if(objectsByClassID(i).name.match(pattern)) 
				matchingObjects.Add(objectsByClassID(i));
		}
	}
	return matchingObjects;
}