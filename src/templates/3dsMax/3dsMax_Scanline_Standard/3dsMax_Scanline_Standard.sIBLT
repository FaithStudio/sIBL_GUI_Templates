[Template]
Name = @Name | Standard | String | Template Name
Path = @Path | | String | Template Path
HelpFile = @HelpFile | help/3dsMax_Scanline_Standard Template Manual.html | String | Help File
Release = @Release | 1.0.3 | String | Template Release
Date = @Date | 27 February 2011 | String | Date
Author = @Author |  Kel Solaar / Dschaga / Jeff Hanna | String | Author
Email = @Email | christian@cgtechniques.com | String | Email
Url = @Url | http://www.thomasmansencal.com/ | String | Url
Software = @Software | 3dsMax  | String | Software
Version = @Version | 2009 To 2011 | String | Version
Renderer = @Renderer | Scanline | String | Renderer
OutputScript = @OutputScript | sIBL_3dsmax_Import.ms | String | Output Script
Comment = @Comment | This is 3dsmax Scanline Template. | String | Comment

[Ibl Set Attributes]
Sun|SUNu = @SUNu
Sun|SUNv = @SUNv
Sun|SUNcolor = @SUNcolor
Sun|SUNmulti = @SUNmulti
Background|BGfile = @BGfile
Enviroment|EVfile = @EVfile
Reflection|REFfile = @REFfile
Lights|DynamicLights = @dynamicLights

[Common Attributes]
createBackground = @createBackground | 1 | Boolean | Create Background
createReflection = @createReflection | 1 | Boolean | Create Reflection
createLighting = @createLighting | 1 | Boolean | Create Lighting
createSun = @createSun | 1 | Boolean | Create Sun
createLights = @createLights | 1 | Boolean | Create Dynamic Lights

[Additional Attributes]
displayFeedback = @displayFeedback | 1 | Boolean | Display Feedback
sunLightType = @sunLightType | Direct;Spot;Omni;Photometric | Enum | Sun Light Type
dynamicLightsType = @dynamicLightsType | Direct;Spot;Omni;Photometric | Enum | Dynamic Lights Type
hideLights = @hideLights | 1 | Boolean | Hide Lights
createGround = @createGround | 1 | Boolean | Create Ground
activateLinearWorkflow = @activateLinearWorkflow | 1 | Boolean | Activate Linear Workflow

[Remote Connection]
ConnectionType = @ConnectionType | Win32 | String
TargetApplication = @TargetApplication | MAX.Application | String
ExecutionCommand = @ExecutionCommand | fileIn ("$loaderScriptPath") | String

[Script]
/*
@OutputScript - @Release For @Software @Version
Author: @Author
EMail: @Email
Homepage: @Url
Template Path: @Path
Template Last Modified: @Date
sIBL_GUI
*/

struct sIBL_datas (backgroundFilePath, lightingFilePath, reflectionFilePath, sunU, sunV, sunColor, sunMultiplier, dynamicLights)
struct sIBL_options (createBackground, createLighting, createReflection,  createSun, createLights, displayFeedback, feedbackRadius, hideLights, sunLightType, dynamicLightsType, createGround, activateLinearWorkflow)
struct sIBL_sceneNodes (datasGroup,  lightsGroup, feedback, domeLight)
	
global sIBL_DATAS =  sIBL_datas backgroundFilePath:"@BGfile" lightingFilePath:"@EVfile" reflectionFilePath:"@REFfile" sunU:@SUNu sunV:@SUNv sunColor:"@SUNcolor" sunMultiplier:@SUNmulti dynamicLights:"@dynamicLights"
global sIBL_OPTIONS = sIBL_options createBackground:@createBackground createLighting:@createLighting createReflection:@createReflection createSun:@createSun createLights:@createLights displayFeedback:@displayFeedback feedbackRadius:1000 hideLights:@hideLights sunLightType:"@sunLightType" dynamicLightsType:"@dynamicLightsType" createGround:@createGround activateLinearWorkflow:@activateLinearWorkflow
global sIBL_SCENE_NODES = sIBL_sceneNodes()

fn sIBL_3dsmax_Scanline_getSceneExtent =
(
	sceneExtent = 0
	for object_ in Geometry do
	(
		bBox = nodeGetBoundingBox object_ (Matrix3 1)
		for i = 1 to bBox.count  do
		(
			toArray = #(abs(bBox[i].x), abs(bBox[i].y), abs(bBox[i].z))
			if amax(toArray) > sceneExtent then sceneExtent = amax(toArray)
		)
	)

	return sceneExtent
)

fn sIBL_3dsmax_Scanline_truncFloatNumber number truncValue =
(
	if truncValue != 0 then
		return floor(number / truncValue) * truncValue
	else 
		return number
)

fn sIBL_3dsmax_Scanline_getExtendedFeedbackRadius feedbackRadius =
(
	sceneExtent = sIBL_3dsmax_Scanline_getSceneExtent()
	sceneExtent = sceneExtent + (sceneExtent*50/100)

	if sceneExtent < feedbackRadius then
		return feedbackRadius
	else
		return sIBL_3dsmax_Scanline_truncFloatNumber sceneExtent 10
)

fn sIBL_3dsmax_Scanline_getDefaultControllers currentNode =
(
	currentNode.Transform.controller = prs ()
	currentNode.rotation.controller = Euler_XYZ ()
	currentNode.scale.controller = bezier_scale ()
)

fn sIBL_3dsmax_Scanline_environmentDeletion =
(
	-- sIBL Nodes Deletion.
	delete $sIBL_*
	
	-- sIBL Environment Map Deletion.
	environmentMap = undefined

	freeSceneBitmaps()
)

fn sIBL_3dsmax_Scanline_activateScanlineRender =
(
	if(IsKindOf renderers.current Default_Scanline_Renderer == False ) then
	(
		renderers.current = Default_Scanline_Renderer()
	)
	SceneRadiosity.radiosity = Light_Tracer()
)

fn sIBL_3dsmax_Scanline_hideLights =
(
	hide lights
)

fn sIBL_3dsmax_Scanline_getSIBLGroup = 
(
	local sIBL_Point = Point name:"sIBL_Point" centermarker:off axistripod:off cross:off Box:off
	sIBL_SCENE_NODES.datasGroup = group sIBL_Point name:"sIBL_Datas"
)

fn sIBL_3dsmax_Scanline_getFeedback feedbackRadius createBackground texturePath =
(
	local feedbackSphere = Sphere radius:feedbackRadius segs:32 mapcoords:on backfacecull:on renderable:off
	
	sIBL_3dsmax_Scanline_getDefaultControllers feedbackSphere
	
	local normalModifier_ = Normalmodifier()
	normalModifier_.flip = True
	addModifier feedbackSphere normalModifier_
	collapseStack feedbackSphere
		
	if(createBackground == 1) then
	(
		local feedbackShader = StandardMaterial name:"sIBL_FeedbackShader"
		feedbackShader.selfIllumAmount = 100
		feedbackShader.diffuse = color 255 255 255
		feedbackShader.ambient = feedbackShader.diffuse
		
		feedBackTexture = Bitmaptexture fileName:texturePath
		feedBackTexture.coordinates.u_tiling = -1
		feedbackShader.diffuseMap =  feedBackTexture
		feedbackShader.selfillumMap =  feedBackTexture

		feedbackSphere.material = feedbackShader
		showTextureMap feedbackShader True
	)

	feedbackSphere.parent = sIBL_SCENE_NODES.datasGroup
	setTransformLockFlags feedbackSphere #{1,2,3,4,5}
	
	feedbackSphere.name = "sIBL_Feedback"
	sIBL_SCENE_NODES.feedback = feedbackSphere
)

fn sIBL_3dsmax_Scanline_getLightsGroup = 
(
	local sIBL_Point = Point name:"sIBL_Lights_Point" centermarker:off axistripod:off cross:off Box:off
	sIBL_SCENE_NODES.lightsGroup = group sIBL_Point name:"sIBL_Lights"
	
	sIBL_3dsmax_Scanline_getDefaultControllers sIBL_SCENE_NODES.lightsGroup

	sIBL_SCENE_NODES.lightsGroup.parent = sIBL_SCENE_NODES.datasGroup
)

fn sIBL_3dsmax_Scanline_createSkyLight =
(
	local iblSkylight = Skylight()
	iblSkylight.sky_mode = 1
	
	iblSkylight.parent = sIBL_SCENE_NODES.datasGroup

	iblSkylight.name = "sIBL_SkyLight"

	sIBL_SCENE_NODES.domeLight = iblSkylight
)

fn sIBL_3dsmax_Scanline_getLight lightType lightName lightColor intensity lightDistance uCoordinate vCoordinate =
(
	if(sIBL_SCENE_NODES.lightsGroup == undefined) then
		sIBL_3dsmax_Scanline_getLightsGroup()

	lightColorTokens = filterstring lightColor ","

	uCoordinate += 0.75
	projectedRadius = cos((0.5 - vCoordinate) * 180)
	
	local xPos = lightDistance * ((cos(uCoordinate * 360)) * projectedRadius)
	local yPos = lightDistance * ((sin(uCoordinate * 360)) * projectedRadius) * -1
	local zPos = lightDistance * (sin((0.5 - vCoordinate) * 180))
	
	local lightTarget = TargetObject transform:(matrix3 [1,0,0] [0,1,0] [0,0,1] [0,0,0])
	lightTarget.parent = sIBL_SCENE_NODES.lightsGroup
	
	local lightColor = color (lightColorTokens[1] as float) (lightColorTokens[2] as float) (lightColorTokens[3] as float)
	local lightFalloff = lightDistance + 5

	if(lightType == "Direct") then
	(
		local light = TargetDirectionalLight castShadows:on hotspot:lightDistance falloff:lightFalloff
	)
	else if(lightType == "Spot") then
	(
		local light = TargetSpot castShadows:on hotspot:lightDistance falloff:lightFalloff
	)
	else if(lightType == "Omni") then
	(
		local light = OmniLight castShadows:on
	)
	else if(lightType == "Photometric") then
	(
		local light = Target_Light rgbFilter:lightColor castShadows:on
		light.intensity = 1.0 * (intensity as float)  * (lightDistance * lightDistance)
	)
	
	if(lightType == "Direct" or lightType == "Spot" or lightType == "Omni" or lightType == "Photometric") then
	(
		light.rgb = lightColor
		light.multiplier = (intensity as float)
		light.shadowGenerator = RaytraceShadow()
	)
	
	light.pos = [(xPos as float),  (yPos as float), (zPos as float)]
	light.target = lightTarget
	
	light.parent = sIBL_SCENE_NODES.lightsGroup
	
	lightTarget.name = lightName + "_Target"
	light.name = lightName
)

fn sIBL_3dsmax_Scanline_createSun sunLightType sunColor sunMultiplier lightDistance sunU sunV =
(
	sIBL_3dsmax_Scanline_getLight sunLightType "sIBL_Sun" sunColor sunMultiplier lightDistance sunU sunV
)

fn sIBL_3dsmax_Scanline_createDynamicLights dynamicLightsType dynamicLights lightDistance =
(
	local dynamicLightsTokens = filterString dynamicLights "|"

	for i = 1 to dynamicLightsTokens.count by 8 do
	(		
		local lightName = "sIBL_" + substituteString dynamicLightsTokens[i+1] " " "_"
		local lightColor = dynamicLightsTokens[i+2] + "," + dynamicLightsTokens[i+3] + "," + dynamicLightsTokens[i+4]
		local intensity = dynamicLightsTokens[i+5] as float
		local uCoordinate = dynamicLightsTokens[i+6] as float
		local vCoordinate = dynamicLightsTokens[i+7] as float
		
		sIBL_3dsmax_Scanline_getLight dynamicLightsType lightName lightColor intensity lightDistance uCoordinate vCoordinate
	)
)

fn sIBL_3dsmax_Scanline_getEnvironmentBranch branchName filePath =
(
	local texture = Bitmaptexture()
	texture.filename = filePath
	texture.coordinates.mappingtype = 1
	texture.coordinates.mapping = 0
	texture.coordinates.U_Tiling = -1.0
	
	texture.name = branchName + "_BitmapTexture"
	
	return texture
)

fn sIBL_3dsmax_Scanline_setEnvironment createBackground createLighting createReflection backgroundFilePath lightingFilePath reflectionFilePath =
(
	if(createBackground == 1) then
	(
		local backgroundBranch = sIBL_3dsmax_Scanline_getEnvironmentBranch "sIBL_Background" backgroundFilePath
		environmentMap = backgroundBranch
		-- Enforcing The Mapping Type Because Of A Fucking Strange Bug.
		environmentMap.coordinates.mapping = 0
	)
	
	if(createLighting == 1) then
	(
		local lightingBranch = sIBL_3dsmax_Scanline_getEnvironmentBranch "sIBL_Lighting" lightingFilePath
		sIBL_SCENE_NODES.domeLight.sky_color_map = lightingBranch
	)

	if(createReflection == 1) then
	(
		--local reflectionBranch = sIBL_3dsmax_Scanline_getEnvironmentBranch "sIBL_Reflection" reflectionFilePath
		print "sIBL_GUI | This Template Doesn't Support Reflections, Reflections Shading Branch Skipped!"
	)
)

fn sIBL_3dsmax_Scanline_connectFeedbackToSIBLShaders createBackground createLighting createReflection =
(
	if(createBackground == 1) then
	(
		paramWire.connect sIBL_SCENE_NODES.feedback.rotation.controller[#Z_Rotation] environmentMap.coordinates[#U_Offset] "(Z_Rotation-(pi*2))*2/pi/4"
	)

	if(createLighting == 1) then
	(
		paramWire.connect sIBL_SCENE_NODES.feedback.rotation.controller[#Z_Rotation] sIBL_SCENE_NODES.domeLight.sky_color_map.coordinates[#U_Offset] "(Z_Rotation-(pi*2))*2/pi/4"
	)
	
	if(createReflection == 1) then
		print "sIBL_GUI | This Template Doesn't Support Reflections, Reflections Branch Visual Feedback Connections Skipped!"
)

fn sIBL_3dsmax_Scanline_connectFeedbackToLights =
(
	if(sIBL_SCENE_NODES.lightsGroup != undefined) then
	(
		paramWire.connect sIBL_SCENE_NODES.feedback.rotation.controller[#Z_Rotation] sIBL_SCENE_NODES.lightsGroup.rotation.controller[#Z_Rotation] "Z_Rotation"
		paramWire.connect sIBL_SCENE_NODES.feedback.transform.controller[#Scale] sIBL_SCENE_NODES.lightsGroup.transform.controller[#Scale] "Scale"
	)
)

fn sIBL_3dsmax_Scanline_createGround currentScale =
(
	local currentScale = currentScale * (sqrt 2)
	local currentPlane = plane typeinCreationMethod:1 length:currentScale width:currentScale
	currentPlane.backfacecull = on
	currentPlane.parent = sIBL_SCENE_NODES.datasGroup
	
	local groundShader = StandardMaterial name:"sIBL_GroundShader"
	currentPlane.material = groundShader

	currentPlane.name =  "sIBL_Ground"
)

fn sIBL_3dsmax_Scanline_activateLinearWorkflow createBackground =
(
	SceneExposureControl.exposureControl = Logarithmic_Exposure_Control()
)

fn sIBL_3dsmax_Scanline_setup  =
(
	if(Default_Scanline_Renderer != undefined) then
	(
		if(sIBL_3dsmax_preProcessCallback != undefined) then
		(
			print "sIBL_GUI | Executing Overall Preprocess Callback!"
			sIBL_3dsmax_preProcessCallback()
		)

		if(sIBL_3dsmax_Scanline_preProcessCallback != undefined) then
		(
			print "sIBL_GUI | Executing Template Specific Preprocess Callback!"
			sIBL_3dsmax_Scanline_preProcessCallback()
		)

		print "sIBL_GUI | Starting sIBL File Import!"

		sIBL_3dsmax_Scanline_environmentDeletion()

		sIBL_OPTIONS.feedbackRadius = sIBL_3dsmax_Scanline_getExtendedFeedbackRadius sIBL_OPTIONS.feedbackRadius

		sIBL_3dsmax_Scanline_activateScanlineRender()
		
		if(sIBL_OPTIONS.hideLights == 1) then
			sIBL_3dsmax_Scanline_hideLights()
	
		sIBL_3dsmax_Scanline_getSIBLGroup()

		if(sIBL_OPTIONS.displayFeedback == 1) then
			sIBL_3dsmax_Scanline_getFeedback sIBL_OPTIONS.feedbackRadius  sIBL_OPTIONS.createBackground sIBL_DATAS.backgroundFilePath
		
		sIBL_3dsmax_Scanline_createSkyLight()

		sIBL_3dsmax_Scanline_setEnvironment sIBL_OPTIONS.createBackground sIBL_OPTIONS.createLighting sIBL_OPTIONS.createReflection sIBL_DATAS.backgroundFilePath sIBL_DATAS.lightingFilePath sIBL_DATAS.reflectionFilePath
		
		if(sIBL_OPTIONS.displayFeedback == 1) then
			sIBL_3dsmax_Scanline_connectFeedbackToSIBLShaders  sIBL_OPTIONS.createBackground sIBL_OPTIONS.createLighting sIBL_OPTIONS.createReflection

		if(sIBL_OPTIONS.createSun == 1 and sIBL_DATAS.sunU != -1 and sIBL_DATAS.sunV != -1) then
			sIBL_3dsmax_Scanline_createSun sIBL_OPTIONS.sunLightType sIBL_DATAS.sunColor sIBL_DATAS.sunMultiplier sIBL_OPTIONS.feedbackRadius sIBL_DATAS.sunU sIBL_DATAS.sunV
	
		if(sIBL_OPTIONS.createLights == 1 and sIBL_DATAS.dynamicLights != "-1") then
			sIBL_3dsmax_Scanline_createDynamicLights sIBL_OPTIONS.dynamicLightsType sIBL_DATAS.dynamicLights sIBL_OPTIONS.feedbackRadius
	
		if(sIBL_OPTIONS.displayFeedback == 1) then
			sIBL_3dsmax_Scanline_connectFeedbackToLights()

		if(sIBL_OPTIONS.createGround == 1) then
			sIBL_3dsmax_Scanline_createGround sIBL_OPTIONS.feedbackRadius
		
		if(sIBL_OPTIONS.activateLinearWorkflow == 1) then
			sIBL_3dsmax_Scanline_activateLinearWorkflow sIBL_OPTIONS.createBackground
		
		print "sIBL_GUI | sIBL File Import Finished!"
		
		if(sIBL_3dsmax_postProcessCallback != undefined) then
		(
			print "sIBL_GUI | Executing Overall Postprocess Callback!"
			sIBL_3dsmax_postProcessCallback()
		)

		if(sIBL_3dsmax_Scanline_postProcessCallback != undefined) then
		(
			print "sIBL_GUI | Executing Template Specific Postprocess Callback!"
			sIBL_3dsmax_Scanline_postProcessCallback()
		)
	)
	else
		messageBox "sIBL_GUI | Mental Ray Renderer Is Not Available!" title:"sIBL_GUI Error"
)

sIBL_3dsmax_Scanline_setup()