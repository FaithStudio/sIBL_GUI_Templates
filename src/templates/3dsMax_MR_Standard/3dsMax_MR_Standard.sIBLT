[Template]
Name = @Name | 3dsMax Mental Ray Standard | String | Template Name
Path = @Path | | String | Template Path
HelpFile = @HelpFile | help/3dsMax_MR_Standard_Template_Manual.html | String | Help File
Release = @Release | 1.1.0 | String | Template Release
Date = @Date | 11 March 2011 | String | Date
Author = @Author | Kel Solaar / Dschaga / Jeff Hanna / JHaywood  | String | Author
Email = @Email | thomas.mansencal@gmail.com | String | Email
Url = @Url | http://thomasmansencal.com/ | String | Url
Software = @Software | 3dsMax  | String | Software
Version = @Version | 2009 To 2011 | String | Version
Renderer = @Renderer | Mental Ray | String | Renderer
OutputScript = @OutputScript | sIBL_3dsmax_Import.ms | String | Output Script
Comment = @Comment | This is 3dsmax 2009 To 2011 Mental Ray Template. | String | Comment

[Ibl Set Attributes]
Background|BGfile = @BGfile
Reflection|REFfile = @REFfile
Enviroment|EVfile = @EVfile
Sun|SUNu = @SUNu
Sun|SUNv = @SUNv
Sun|SUNcolor = @SUNcolor
Sun|SUNmulti = @SUNmulti
Lights|DynamicLights = @dynamicLights

[Common Attributes]
sceneSetupPrefix = @sceneSetupPrefix | sIBL | String | Scene Setup Prefix
createBackground = @createBackground | 1 | Boolean | Create Background
createReflection = @createReflection | 1 | Boolean | Create Reflection
createLighting = @createLighting | 1 | Boolean | Create Lighting
createSun = @createSun | 1 | Boolean | Create Sun
createLights = @createLights | 1 | Boolean | Create Dynamic Lights

[Additional Attributes]
displayFeedback = @displayFeedback | 1 | Boolean | Display Feedback
sunLightType = @sunLightType | mrSun;Direct;Spot;Omni;Photometric;mrAreaSpot;mrAreaOmni | Enum | Sun Light Type
dynamicLightsType = @dynamicLightsType | Direct;Spot;Omni;Photometric;mrSun;mrAreaSpot;mrAreaOmni | Enum | Dynamic Lights Type
hideLights = @hideLights | 1 | Boolean | Hide Lights
createGround = @createGround | 1 | Boolean | Create Ground
shadowCatcher = @shadowCatcher | 1 | Boolean | Ground Shadow Catcher
activateLinearWorkflow = @activateLinearWorkflow | 1 | Boolean | Activate Linear Workflow

[Remote Connection]
ConnectionType = @ConnectionType | Win32 | String
TargetApplication = @TargetApplication | MAX.Application | String
ExecutionCommand = @ExecutionCommand | fileIn ("$loaderScriptPath") | String

[Script]
/*
@OutputScript - @Release for @Software @Version
Author: @Author
EMail: @Email
Homepage: @Url
Template path: @Path
Template last modified: @Date
sIBL_GUI
*/

struct sIBL_data (backgroundFilePath, reflectionFilePath, lightingFilePath, sunU, sunV, sunColor, sunMultiplier, dynamicLights)
struct sIBL_options (createBackground, createLighting, createReflection,  createSun, createLights, displayFeedback, feedbackRadius, hideLights, sunLightType, dynamicLightsType, createGround, shadowCatcher, activateLinearWorkflow)
struct sIBL_sceneNodes (dataGroup,  lightsGroup, feedback)

global sIBL_DATAS =  sIBL_data backgroundFilePath:"@BGfile" reflectionFilePath:"@REFfile" lightingFilePath:"@EVfile" sunU:@SUNu sunV:@SUNv sunColor:"@SUNcolor" sunMultiplier:@SUNmulti dynamicLights:"@dynamicLights"
global sIBL_OPTIONS = sIBL_options createBackground:@createBackground createReflection:@createReflection createLighting:@createLighting createSun:@createSun createLights:@createLights displayFeedback:@displayFeedback feedbackRadius:1000 sunLightType:"@sunLightType" dynamicLightsType:"@dynamicLightsType" hideLights:@hideLights createGround:@createGround shadowCatcher:@shadowCatcher activateLinearWorkflow:@activateLinearWorkflow
global sIBL_SCENE_NODES = sIBL_sceneNodes()

fn sIBL_3dsmax_MR_getSceneExtent =
(
	sceneExtent = 0
	for object_ in Geometry do
	(
		bBox = nodeGetBoundingBox object_ (Matrix3 1)
		for i = 1 to bBox.count  do
		(
			toArray = #(abs(bBox[i].x), abs(bBox[i].y), abs(bBox[i].z))
			if amax(toArray) > sceneExtent then sceneExtent = amax(toArray)
		)
	)

	return sceneExtent
)

fn sIBL_3dsmax_MR_truncFloatNumber number truncValue =
(
	if truncValue != 0 then
		return floor(number / truncValue) * truncValue
	else
		return number
)

fn sIBL_3dsmax_MR_getExtendedFeedbackRadius feedbackRadius =
(
	sceneExtent = sIBL_3dsmax_MR_getSceneExtent()
	sceneExtent = sceneExtent + (sceneExtent*50/100)

	if sceneExtent < feedbackRadius then
		return feedbackRadius
	else
		return sIBL_3dsmax_MR_truncFloatNumber sceneExtent 10
)

fn sIBL_3dsmax_MR_hasProductionShadersSupport =
(
	if(maxVersion())[1]/1000 < 13 then
		return False
	else
		return True
)

fn sIBL_3dsmax_MR_getDefaultControllers currentNode =
(
	currentNode.Transform.controller = prs ()
	currentNode.rotation.controller = Euler_XYZ ()
	currentNode.scale.controller = bezier_scale ()
)

fn sIBL_3dsmax_MR_environmentDeletion =
(
	-- sIBL Nodes Deletion.
	delete $sIBL_*

	-- sIBL Environment Map Deletion.
	environmentMap = undefined

	-- sIBL Lens Shader Deletion.
	if(classOf  renderers.current == mental_ray_renderer) then
		renderers.current.Camera_Lens_Shader = undefined

	freeSceneBitmaps()
)

fn sIBL_3dsmax_MR_activateMentalRay =
(
	if(IsKindOf renderers.current mental_ray_renderer == False ) then
	(
		renderers.current = mental_ray_renderer()

		renderers.current.MinimumSamples = 0
		renderers.current.MaximumSamples = 2

		if((maxVersion())[1]/1000 >= 11) then
			renderers.current.RestoreFinalGatherPreset 4
	)

	renderers.current.FinalGatherEnable2 = True
)

fn sIBL_3dsmax_MR_hideLights =
(
	hide lights
)

fn sIBL_3dsmax_MR_getSIBLGroup =
(
	local sIBL_Point = Point name:"sIBL_Point" centermarker:off axistripod:off cross:off Box:off
	sIBL_SCENE_NODES.dataGroup = group sIBL_Point name:"sIBL_Data"
)

fn sIBL_3dsmax_MR_getFeedback feedbackRadius createBackground texturePath =
(
	local feedbackSphere = Sphere radius:feedbackRadius segs:32 mapcoords:on backfacecull:on renderable:off

	sIBL_3dsmax_MR_getDefaultControllers feedbackSphere

	local normalModifier_ = Normalmodifier()
	normalModifier_.flip = True
	addModifier feedbackSphere normalModifier_
	collapseStack feedbackSphere

	if(createBackground == 1) then
	(
		local feedbackShader = StandardMaterial name:"sIBL_FeedbackShader"
		feedbackShader.selfIllumAmount = 100
		feedbackShader.diffuse = color 255 255 255
		feedbackShader.ambient = feedbackShader.diffuse

		feedBackTexture = Bitmaptexture fileName:texturePath
		feedBackTexture.coordinates.u_tiling = -1
		feedbackShader.diffuseMap =  feedBackTexture
		feedbackShader.selfillumMap =  feedBackTexture

		feedbackSphere.material = feedbackShader
		showTextureMap feedbackShader True
	)

	feedbackSphere.parent = sIBL_SCENE_NODES.dataGroup
	setTransformLockFlags feedbackSphere #{1,2,3,4,5}

	feedbackSphere.name = "sIBL_Feedback"
	sIBL_SCENE_NODES.feedback = feedbackSphere
)

fn sIBL_3dsmax_MR_getLightsGroup =
(
	local sIBL_Point = Point name:"sIBL_Lights_Point" centermarker:off axistripod:off cross:off Box:off
	sIBL_SCENE_NODES.lightsGroup = group sIBL_Point name:"sIBL_Lights"

	sIBL_3dsmax_MR_getDefaultControllers sIBL_SCENE_NODES.lightsGroup

	sIBL_SCENE_NODES.lightsGroup.parent = sIBL_SCENE_NODES.dataGroup
)

fn sIBL_3dsmax_MR_createSkyLight =
(
	local iblSkylight = Skylight()
	iblSkylight.sky_mode = 0

	iblSkylight.parent = sIBL_SCENE_NODES.dataGroup

	iblSkylight.name = "sIBL_SkyLight"
)

fn sIBL_3dsmax_MR_getLight lightType lightName lightColor intensity lightDistance uCoordinate vCoordinate =
(
	if(sIBL_SCENE_NODES.lightsGroup == undefined) then
		sIBL_3dsmax_MR_getLightsGroup()

	lightColorTokens = filterstring lightColor ","

	uCoordinate += 0.75
	projectedRadius = cos((0.5 - vCoordinate) * 180)

	local xPos = lightDistance * ((cos(uCoordinate * 360)) * projectedRadius)
	local yPos = lightDistance * ((sin(uCoordinate * 360)) * projectedRadius) * -1
	local zPos = lightDistance * (sin((0.5 - vCoordinate) * 180))

	local lightTarget = TargetObject transform:(matrix3 [1,0,0] [0,1,0] [0,0,1] [0,0,0])
	lightTarget.parent = sIBL_SCENE_NODES.lightsGroup

	local lightColor = color (lightColorTokens[1] as float) (lightColorTokens[2] as float) (lightColorTokens[3] as float)
	local lightFalloff = lightDistance + 5

	if(lightType == "Direct") then
	(
		local light = TargetDirectionalLight castShadows:on hotspot:lightDistance falloff:lightFalloff
	)
	else if(lightType == "Spot") then
	(
		local light = TargetSpot castShadows:on hotspot:lightDistance falloff:lightFalloff
	)
	else if(lightType == "Omni") then
	(
		local light = OmniLight castShadows:on
	)
	else if(lightType == "Photometric") then
	(
		local light = Target_Light rgbFilter:lightColor castShadows:on
		light.intensity = 1.0 * (intensity as float)  * (lightDistance * lightDistance)
	)
	else if(lightType == "mrAreaSpot") then
	(
		local light = miAreaLight()
		light.Rectangle_Height = 16
		light.Rectangle_Width = 16
		light.Disc_Radius = 16
	)
	else if(lightType == "mrAreaOmni") then
	(
		local light = miAreaLightOmni()
		light.Sphere_Radius = 16
		light.Cylinder_Height = 16
	)
	else if(lightType == "mrSun") then
	(
		local multiplier =  (intensity as float)*0.03
		local light = mr_Sun skymult:multiplier pos:[(xPos as float),  (yPos as float), (zPos as float)] target:lightTarget
	)

	if(lightType == "Direct" or lightType == "Spot" or lightType == "Omni" or lightType == "Photometric" or lightType == "mrAreaSpot" or lightType == "mrAreaOmni") then
	(
		light.rgb = lightColor
		light.multiplier = (intensity as float)
		if(lightType != "mrAreaSpot" and lightType != "mrAreaOmni") then
			light.shadowGenerator = RaytraceShadow()
	)

	light.pos = [(xPos as float),  (yPos as float), (zPos as float)]
	light.target = lightTarget

	light.parent = sIBL_SCENE_NODES.lightsGroup

	lightTarget.name = lightName + "_Target"
	light.name = lightName
)

fn sIBL_3dsmax_MR_createSun sunLightType sunColor sunMultiplier lightDistance sunU sunV =
(
	sIBL_3dsmax_MR_getLight sunLightType "sIBL_Sun" sunColor sunMultiplier lightDistance sunU sunV
)

fn sIBL_3dsmax_MR_createDynamicLights dynamicLightsType dynamicLights lightDistance =
(
	local dynamicLightsTokens = filterString dynamicLights "|"

	for i = 1 to dynamicLightsTokens.count by 8 do
	(
		local lightName = "sIBL_" + substituteString dynamicLightsTokens[i+1] " " "_"
		local lightColor = dynamicLightsTokens[i+2] + "," + dynamicLightsTokens[i+3] + "," + dynamicLightsTokens[i+4]
		local intensity = dynamicLightsTokens[i+5] as float
		local uCoordinate = dynamicLightsTokens[i+6] as float
		local vCoordinate = dynamicLightsTokens[i+7] as float

		sIBL_3dsmax_MR_getLight dynamicLightsType lightName lightColor intensity lightDistance uCoordinate vCoordinate
	)
)

fn sIBL_3dsmax_MR_getEnvironmentBranch branchName filePath =
(
	local texture = Bitmaptexture()
	texture.filename = filePath
	texture.coordinates.mappingtype = 1
	texture.coordinates.mapping = 0
	texture.coordinates.U_Tiling = -1.0

	local gammaGain =  Utility_Gamma___Gain__mi()
	gammaGain.gamma = 1.0
	gammaGain.input_shader = texture

	texture.name = branchName + "_BitmapTexture"
	gammaGain.name = branchName + "_GammaGain"

	return gammaGain
)

fn sIBL_3dsmax_MR_setEnvironment createBackground createLighting createReflection backgroundFilePath lightingFilePath reflectionFilePath =
(
	local rayswitchShader = if(not sIBL_3dsmax_MR_hasProductionShadersSupport()) then
		mr_Raytype_Switcher__advanced()
	else
		Color_Override_Ray_Type_Switcher()
	environmentMap = rayswitchShader

	if(createBackground == 1) then
	(
		local backgroundBranch = sIBL_3dsmax_MR_getEnvironmentBranch "sIBL_Background" backgroundFilePath
		rayswitchShader.eye = backgroundBranch
	)

	if(createLighting == 1) then
	(
		local lightingBranch = sIBL_3dsmax_MR_getEnvironmentBranch "sIBL_Lighting" lightingFilePath
		rayswitchShader.finalgather = lightingBranch
	)

	if(createReflection == 1) then
	(
		local reflectionBranch = sIBL_3dsmax_MR_getEnvironmentBranch "sIBL_Reflection" reflectionFilePath
		rayswitchShader.environment = reflectionBranch
		rayswitchShader.reflection = reflectionBranch
		rayswitchShader.refraction = reflectionBranch
	)

	rayswitchShader.name = "sIBL_RaySwitch"
)

fn sIBL_3dsmax_MR_connectFeedbackToSIBLShaders createBackground createLighting createReflection =
(
	if(createBackground == 1) then
	(
		paramWire.connect sIBL_SCENE_NODES.feedback.rotation.controller[#Z_Rotation] environmentMap.eye.input_shader.coordinates[#U_Offset] "(Z_Rotation-(pi*2))*2/pi/4"
	)

	if(createLighting == 1) then
	(
		paramWire.connect sIBL_SCENE_NODES.feedback.rotation.controller[#Z_Rotation] environmentMap.finalgather.input_shader.coordinates[#U_Offset] "(Z_Rotation-(pi*2))*2/pi/4"
	)

	if(createReflection == 1) then
	(
		paramWire.connect sIBL_SCENE_NODES.feedback.rotation.controller[#Z_Rotation] environmentMap.environment.input_shader.coordinates[#U_Offset] "(Z_Rotation-(pi*2))*2/pi/4"
		paramWire.connect sIBL_SCENE_NODES.feedback.rotation.controller[#Z_Rotation] environmentMap.reflection.input_shader.coordinates[#U_Offset] "(Z_Rotation-(pi*2))*2/pi/4"
		paramWire.connect sIBL_SCENE_NODES.feedback.rotation.controller[#Z_Rotation] environmentMap.refraction.input_shader.coordinates[#U_Offset] "(Z_Rotation-(pi*2))*2/pi/4"
	)
)

fn sIBL_3dsmax_MR_connectFeedbackToLights =
(
	if(sIBL_SCENE_NODES.lightsGroup != undefined) then
	(
		paramWire.connect sIBL_SCENE_NODES.feedback.rotation.controller[#Z_Rotation] sIBL_SCENE_NODES.lightsGroup.rotation.controller[#Z_Rotation] "Z_Rotation"
		paramWire.connect sIBL_SCENE_NODES.feedback.transform.controller[#Scale] sIBL_SCENE_NODES.lightsGroup.transform.controller[#Scale] "Scale"
	)
)

fn sIBL_3dsmax_MR_createGround currentScale shadowCatcher =
(
	local currentScale = currentScale * (sqrt 2)
	local currentPlane = plane typeinCreationMethod:1 length:currentScale width:currentScale
	currentPlane.backfacecull = on
	currentPlane.parent = sIBL_SCENE_NODES.dataGroup

	local groundShader = if(shadowCatcher == 1) then
		Matte_Shadow_Reflection__mi background_shader:environmentMap.eye ambient_intensity:1.0 ambient:(color 20 20 20) ao_samples:32 ao_distance:0.0 ao_dark:(color 40 40 40)
	else
		StandardMaterial name:"sIBL_GroundShader"
	currentPlane.material = groundShader

	currentPlane.name =  "sIBL_Ground"
)

fn sIBL_3dsmax_MR_activateLinearWorkflow createBackground =
(
	local lensShader = Utility_Gamma___Gain__mi()
	renderers.current.Camera_Lens_Shader = lensShader
	lensShader.reverse = False
	lensShader.name = "sIBL_Lens"

	if(createBackground == 1) then
		environmentMap.eye.gamma = 2.2
)

fn sIBL_3dsmax_MR_setup  =
(
	if(not sIBL_3dsmax_MR_hasProductionShadersSupport()) then
		try
		(
			local rayswitchShader = mr_Raytype_Switcher__advanced()
			rayswitchShader = undefined
		)
		catch
		(
			messageBox "sIBL_GUI | Mental Ray Productions Shaders are not available!" title:"sIBL_GUI Error"
			return ()
		)

	if(mental_ray_renderer != undefined) then
	(
		if(sIBL_3dsmax_preProcessCallback != undefined) then
		(
			print "sIBL_GUI | Executing overall preprocess Callback!"
			sIBL_3dsmax_preProcessCallback()
		)

		if(sIBL_3dsmax_MR_preProcessCallback != undefined) then
		(
			print "sIBL_GUI | Executing Template specific preprocess Callback!"
			sIBL_3dsmax_MR_preProcessCallback()
		)

		print "sIBL_GUI | Starting Ibl file import!"

		sIBL_3dsmax_MR_environmentDeletion()

		sIBL_OPTIONS.feedbackRadius = sIBL_3dsmax_MR_getExtendedFeedbackRadius sIBL_OPTIONS.feedbackRadius

		sIBL_3dsmax_MR_activateMentalRay()

		if(sIBL_OPTIONS.hideLights == 1) then
			sIBL_3dsmax_MR_hideLights()

		sIBL_3dsmax_MR_getSIBLGroup()

		if(sIBL_OPTIONS.displayFeedback == 1) then
			sIBL_3dsmax_MR_getFeedback sIBL_OPTIONS.feedbackRadius  sIBL_OPTIONS.createBackground sIBL_DATAS.backgroundFilePath

		sIBL_3dsmax_MR_createSkyLight()

		sIBL_3dsmax_MR_setEnvironment sIBL_OPTIONS.createBackground sIBL_OPTIONS.createLighting sIBL_OPTIONS.createReflection sIBL_DATAS.backgroundFilePath sIBL_DATAS.lightingFilePath sIBL_DATAS.reflectionFilePath

		if(sIBL_OPTIONS.displayFeedback == 1) then
			sIBL_3dsmax_MR_connectFeedbackToSIBLShaders  sIBL_OPTIONS.createBackground sIBL_OPTIONS.createLighting sIBL_OPTIONS.createReflection

		if(sIBL_OPTIONS.createSun == 1 and sIBL_DATAS.sunU != -1 and sIBL_DATAS.sunV != -1) then
			sIBL_3dsmax_MR_createSun sIBL_OPTIONS.sunLightType sIBL_DATAS.sunColor sIBL_DATAS.sunMultiplier sIBL_OPTIONS.feedbackRadius sIBL_DATAS.sunU sIBL_DATAS.sunV

		if(sIBL_OPTIONS.createLights == 1 and sIBL_DATAS.dynamicLights != "-1") then
			sIBL_3dsmax_MR_createDynamicLights sIBL_OPTIONS.dynamicLightsType sIBL_DATAS.dynamicLights sIBL_OPTIONS.feedbackRadius

		if(sIBL_OPTIONS.displayFeedback == 1) then
			sIBL_3dsmax_MR_connectFeedbackToLights()

		if(sIBL_OPTIONS.createGround == 1) then
			sIBL_3dsmax_MR_createGround sIBL_OPTIONS.feedbackRadius sIBL_OPTIONS.shadowCatcher

		if(sIBL_OPTIONS.activateLinearWorkflow == 1) then
			sIBL_3dsmax_MR_activateLinearWorkflow sIBL_OPTIONS.createBackground

		print "sIBL_GUI | Ibl file import finished!"

		if(sIBL_3dsmax_postProcessCallback != undefined) then
		(
			print "sIBL_GUI | Executing overall postprocess Callback!"
			sIBL_3dsmax_postProcessCallback()
		)

		if(sIBL_3dsmax_MR_postProcessCallback != undefined) then
		(
			print "sIBL_GUI | Executing Template specific postprocess Callback!"
			sIBL_3dsmax_MR_postProcessCallback()
		)
	)
	else
		messageBox "sIBL_GUI | Mental Ray renderer is not available!" title:"sIBL_GUI Error"
)

(
	local sIBL_proceedSetup = 1
	if(sIBL_DATAS.backgroundFilePath == "-1" or sIBL_DATAS.reflectionFilePath == "-1" or sIBL_DATAS.lightingFilePath == "-1") then
	(
		if not queryBox "sIBL_GUI | Non Template compatible Ibl Set provided: Unpredictable results may occur! Would you like to proceed anyway?" beep:false then
			sIBL_proceedSetup = 0
	)

	if(sIBL_proceedSetup == 1)	then
		sIBL_3dsmax_MR_setup()
	else
		print "sIBL_GUI | Ibl file import aborted!"
)