[Template]
Name = @Name | Standard | String | Template Name
Path = @Path | | String | Template Path
HelpFile = @HelpFile | help/Maya_RfM_Standard Template Manual.html | String | Help File
Release = @Release | 2.0.0 | String | Template Release
Date = @Date | 11 March 2011 | String | Date
Author = @Author | Kel Solaar | String | Author
Email = @Email | thomas.mansencal@gmail.com | String | Email
Url = @Url | http://thomasmansencal.com/ | String | Url
Software = @Software | Maya | String | Software
Version = @Version | 2008 To 2011 | String | Version
Renderer = @Renderer | RfM | String | Renderer
OutputScript = @OutputScript | sIBL_Maya_Import.py | String | Output Script
Comment = @Comment | This is Renderman For Maya 2008 To 2011 Template. | String | Comment

[Ibl Set Attributes]
Background|BGfile = @BGfile
Background|BGheight = @BGheight
Enviroment|EVfile = @EVfile
Enviroment|EVmulti = @EVmulti
Enviroment|EVgamma = @EVgamma
Reflection|REFfile = @REFfile
Reflection|REFmulti = @REFmulti
Reflection|REFgamma = @REFgamma
Sun|SUNu = @SUNu
Sun|SUNv = @SUNv
Sun|SUNcolor = @SUNcolor
Sun|SUNmulti = @SUNmulti
Header|Height = @Height
Header|North = @North
Lights|DynamicLights = @dynamicLights

[Common Attributes]
createBackground = @createBackground | 1 | Boolean | Create Background
createReflection = @createReflection | 1 | Boolean | Create Reflection
createLighting = @createLighting | 1 | Boolean | Create Lighting
createSun = @createSun | 1 | Boolean | Create Sun
createLights = @createLights | 1 | Boolean | Create Dynamic Lights

[Additional Attributes]
preserveSessionSettings = @preserveSessionSettings | 1 | Boolean | Preserve Session Settings
displayFeedback = @displayFeedback | 1 | Boolean | Display Feedback
sunLightType = @sunLightType | Directional;Area;Spot;Point | Enum | Sun Light Type
dynamicLightsType = @dynamicLightsType | Directional;Area;Spot;Point | Enum | Dynamic Lights Type
shadowsType = @shadowsType | Raytraced;Shadow Maps;Deep Shadow Maps | Enum | Shadows Type
hideLights = @hideLights | 1 | Boolean | Hide Lights
createGround = @createGround | 1 | Boolean | Create Ground
activateColorBleeding = @activateColorBleeding | 1 | Boolean | Activate Color Bleeding
activateLinearWorkflow = @activateLinearWorkflow | 1 | Boolean | Activate Linear Workflow

[Remote Connection]
ConnectionType = @ConnectionType | Socket | String | Connection Type
ExecutionCommand = @ExecutionCommand | python("import os;import sys;path = \"$loaderScriptPath\";directory = os.path.dirname(path);module = os.path.splitext(os.path.basename(path))[0];not directory in sys.path and sys.path.append(directory);import_ = __import__(module);reload(import_);setup = import_.Setup(); setup.execute()"); | String | ExecutionCommand
DefaultAddress = @DefaultAddress | 127.0.0.1 | Integer | Default Address
DefaultPort = @DefaultPort | 2048 | Integer | Default Port

[Script]
# @OutputScript - @Release For @Software @Version
# Author: @Author
# EMail: @Email
# Homepage: @Url
# Template Path: @Path
# Template Last Modified: @Date
# sIBL_GUI
import math
import maya.cmds as cmds
import maya.mel as mel
import os
import re
import sys

class Constants(object):
	applicationName = "sIBL_GUI"
	prefix = "sIBL"
	package = "@Software".replace(" ", "_")
	renderer = "@Renderer".replace(" ", "_")
	packagePrefix = "%s_%s" % (prefix, package)
	packageRendererPrefix = "%s_%s_%s" % (prefix, package, renderer)
	title = "Smart IBL"
	controlsTitle = "[ %s Controls ]" % title
	maximumViewportTextureSize = 8192
	defaultGamma = 2.2
	sessionNodeTypes =  ("blendColors",
						"condition", 
						"displayLayer", 
						"expression", 
						"file", 
						"gammaCorrect",
						"lambert",
						"multiplyDivide", 
						"place2dTexture", 
						"shadingEngine",
						"RenderMan",
						"RenderManEnvLightShape")
	lightTypes = {"Area":"areaLight",
					"Directional":"directionalLight",
					"Point":"pointLight",
					"Spot":"spotLight"}

class Structure(object):
	def __init__(self, **kwargs):
		self.__dict__.update(kwargs)

class Light(Structure):
	pass

def getDynamicLights(datas):
	dynamicLights = {}
	try:
		tokens = datas.split("|")
		for i in range(0, len(tokens), 8):
			dynamicLights[tokens[i]] = Light(name=tokens[i+1].replace(" ", "_"), color=(float(tokens[i+2] / 255.0), float(tokens[i+3] / 255.0), float(tokens[i+4] / 255.0)), multiplier=float(tokens[i+5]), uCoordinate=float(tokens[i+6]), vCoordinate=float(tokens[i+7]))
	except:
		pass
	return dynamicLights

class Datas(object):
	backgroundFile = "@BGfile"
	backgroundWidth = @BGheight * 2
	reflectionFile = "@REFfile"
	reflectionMultiplier = @REFmulti
	reflectionGamma = @REFgamma
	lightingFile = "@EVfile"
	lightingMultiplier = @EVmulti
	lightingGamma = @EVgamma
	sunU = @SUNu
	sunV = @SUNv
	sunColor = [value / 255.0 for value in [@SUNcolor]]
	sunMultiplier = @SUNmulti
	dynamicLights = getDynamicLights("@dynamicLights")
	height = @Height
	north = @North

class Options(object):
	createBackground = @createBackground
	createReflection = @createReflection
	createLighting = @createLighting
	createSun = @createSun
	createLights = @createLights
	preserveSessionSettings = @preserveSessionSettings
	displayFeedback = @displayFeedback
	feedbackRadius = 100
	sunLightType = "@sunLightType"
	dynamicLightsType = "@dynamicLightsType"
	shadowsType = "@shadowsType" 
	hideLights = @hideLights
	createGround = @createGround
	activateColorBleeding = @activateColorBleeding
	activateLinearWorkflow = @activateLinearWorkflow

class Setup(object):
	def __init__(self):
		if Datas.backgroundFile == "-1" or Datas.reflectionFile == "-1" or Datas.lightingFile == "-1":
			if cmds.confirmDialog(title="%s | Warning" % Constants.applicationName, message="%s | Non Template Compatible Ibl Set Provided: Unpredictable Results May Occur! Would You Like To Proceed Anyway?" % Constants.applicationName, button=["Yes", "No"], defaultButton="Yes", cancelButton="No", dismissString="No") == "No":
				mel.eval("warning(\"%s | %s\")" % (Constants.applicationName, "%s File Import Canceled!" % Constants.prefix))
				self.__exit__()

		self.controlsGroup = None
		self.feedback = None
		self.lightsTarget = None
		self.feedbackRadius = Options.feedbackRadius
		self.storedSessionAttributes = {"%s_feedback.rotateY" % Constants.prefix:None,
										"%s_feedback.scaleX" % Constants.prefix:None,
										"%s_feedback.scaleY" % Constants.prefix:None,
										"%s_feedback.scaleZ" % Constants.prefix:None,
										"%s_ground.translateX" % Constants.prefix:None,
										"%s_ground.translateY" % Constants.prefix:None,
										"%s_ground.translateZ" % Constants.prefix:None,
										"%s_ground.rotateX" % Constants.prefix:None,
										"%s_ground.rotateY" % Constants.prefix:None,
										"%s_ground.rotateZ" % Constants.prefix:None,
										"%s_ground.scaleX" % Constants.prefix:None,
										"%s_ground.scaleY" % Constants.prefix:None,
										"%s_ground.scaleZ" % Constants.prefix:None}

	def __exit__(self):
		sys.exit()

	def execute(self):
		if mel.eval("exists %s_preProcessCallback;" % Constants.packagePrefix):
			print("%s | Executing Overall Preprocess Callback!" % Constants.applicationName)
			mel.eval("%s_preProcessCallback();" % Constants.packagePrefix)

		if mel.eval("exists %s_preProcessCallback;" % Constants.packageRendererPrefix):
			print("%s | Executing Template Specific Preprocess Callback!" % Constants.applicationName)
			mel.eval("%s_preProcessCallback();" % Constants.packageRendererPrefix)

		print("%s | Starting %s File Import!" % (Constants.applicationName, Constants.title))

		Options.preserveSessionSettings and self.storeSessionAttributes()

		self.setRenderer()
		self.deleteSession()
		self.getExtendedFeedbackRadius()		
		self.getControlsGroup()
		self.getControlsLocator()
		Options.hideLights and self.hideLights()
		self.getEnvironmentShaders()
		self.getFeedback()
		self.getLigthsTarget()
		if Options.createSun and Datas.sunU != -1 and Datas.sunV != -1:
			self.getSun()
		if Options.createLights and Datas.dynamicLights:
			self.getDynamicLights()
		self.connectFeedbackToShaders()
		Options.createGround and self.getGround()
		Options.shadowsType == "Raytraced" and self.activateRaytracing()
		Options.activateLinearWorkflow and self.setLinearWorkflow()

		Options.preserveSessionSettings and self.restoreSessionAttributes()

		print("%s | %s File Import Done!" % (Constants.applicationName, Constants.title))

		if mel.eval("exists %s_postProcessCallback;" % Constants.packagePrefix):
			print("%s | Executing Overall Postprocess Callback!" % Constants.applicationName)
			mel.eval("%s_postProcessCallback();" % Constants.packagePrefix)

		if mel.eval("exists %s_postProcessCallback;" % Constants.packageRendererPrefix):
			print("%s | Executing Template Specific Postprocess Callback!" % Constants.applicationName)
			mel.eval("%s_postProcessCallback();" % Constants.packageRendererPrefix)
	
	def storeSessionAttributes(self):
		for attribute in self.storedSessionAttributes.keys():
			if len(cmds.ls(attribute)):
				self.storedSessionAttributes[attribute]= cmds.getAttr(attribute)
	
	def restoreSessionAttributes(self):
		for attribute, value in self.storedSessionAttributes.items():
			if len(cmds.ls(attribute)) and value:
				cmds.setAttr(attribute, value)

	def setRenderer(self):
		not cmds.pluginInfo("RenderMan_for_Maya", q=True, loaded=True) and cmds.loadPlugin("RenderMan_for_Maya")
		cmds.setAttr("defaultRenderGlobals.currentRenderer", "renderMan", type="string")
		cmds.setAttr("renderManGlobals.rman__riattr___ShadingRate", 1)

	def deleteSession(self):
		if cmds.objExists(Constants.prefix):
			cmds.delete(Constants.prefix)
		
		for type in Constants.sessionNodeTypes:
			deleteType(type, "\\b%s*" % Constants.prefix)

	def getExtendedFeedbackRadius(self):
		sceneExtent = getSceneExtent() * math.sqrt(2)
		sceneExtent = sceneExtent + (sceneExtent * 10 / 100)
		
		if sceneExtent > self.feedbackRadius:
			self.feedbackRadius = truncFloat(sceneExtent, 10)

	def getControlsGroup(self):
		if not self.controlsGroup:
			self.controlsGroup = cmds.createNode("transform", n=Constants.prefix)
			lockHideAttributes(self.controlsGroup, ("tx", "ty", "tz", "rx", "ry", "rz", "sx", "sy", "sz"))

	def getControlsLocator(self):
		annotation = cmds.createNode("annotationShape")
		cmds.setAttr("%s.displayArrow" % annotation, 0)
		cmds.setAttr("%s.displayArrow" % annotation, lock=True, keyable=False)
		cmds.setAttr("%s.text" % annotation, Constants.controlsTitle, type="string")

		annotationTransform = getTransform(annotation)
		cmds.setAttr("%s.ty" % annotationTransform, 5)
		lockHideAttributes(annotationTransform, ("rx", "ry", "rz", "sx", "sy", "sz"))
		cmds.addAttr(annotationTransform, ln="renderTogglers", nn="[ Render Togglers ]", at="enum", en=Constants.title)
		cmds.setAttr("%s.renderTogglers" % annotationTransform, e=True, keyable=True, lock=True)

		components = ("Background", "Reflection", "Lighting")
		for component in components:
			cmds.addAttr(annotationTransform, ln="toggle%s" % component, nn=component, at="bool")
			cmds.setAttr("%s.toggle%s" % (annotationTransform, component), e=True, keyable=True, lock=False)
			cmds.setAttr("%s.toggle%s" % (annotationTransform, component), True)
	
		cmds.addAttr(annotationTransform, ln="cc%s" % "Background", nn="[ %s CC ]" % "Background", at="enum", en=Constants.title)
		cmds.setAttr("%s.cc%s" % (annotationTransform, "Background"), e=True, keyable=True, lock=True)
		for control in ("Gamma", "Gain"):
			addColorAttributes(annotationTransform, "%s%s"% ("Background".lower(), control))
		
		for component in ("Reflection", "Lighting"):
			cmds.addAttr(annotationTransform, ln="cc%s" % component, nn="[ %s CC ]" % component, at="enum", en=Constants.title)
			cmds.setAttr("%s.cc%s" % (annotationTransform, component), e=True, keyable=True, lock=True)
			for control in ("Bias", "Gain"):
				addColorAttributes(annotationTransform, "%s%s"% (component.lower(), control))
				cmds.setAttr("%s.%s%s" % (annotationTransform, component.lower(), control), 0.5, 0.5, 0.5, type="double3")

		cmds.parent(cmds.rename(annotationTransform, "%s_controls" % Constants.prefix), self.controlsGroup)

	def hideLights(self):
		lights = cmds.ls(lights=True)
		lights and cmds.hide(lights)

	def getEnvironmentSphereBranch(self, file, prefix, radius, useOverride):
		sphere = self.getDisplayLocator("%s_support" % prefix, radius, True)
		cmds.parent(sphere, self.controlsGroup)
		setAttributes({"%s.overrideEnabled" % sphere:True,
						"%s.overrideShading" % sphere:False})
		
		surfaceShader = cmds.shadingNode("surfaceShader", asShader=True)
		shadingEngine = cmds.sets(renderable=True, noSurfaceShader=True, empty=True)		
		cmds.connectAttr("%s.outColor" % surfaceShader, "%s.surfaceShader" % shadingEngine, f=True)
		
		_file = cmds.shadingNode("file", asTexture=True)
		cmds.setAttr("%s.fileTextureName" % _file, file, type="string")

		place2dTexture = cmds.shadingNode("place2dTexture", asUtility=True)
		cmds.connectAttr("%s.outUV" % place2dTexture, "%s.uvCoord" % _file, f=True)
		cmds.connectAttr("%s.outUvFilterSize" % place2dTexture, "%s.uvFilterSize" % _file, f=True)
		attributes = ("coverage", "translateFrame", "rotateFrame", "mirrorU", "mirrorV", "stagger", "wrapU", "wrapV" , "repeatUV" , "vertexUvOne" , "vertexUvTwo" , "vertexUvThree" , "vertexCameraOne", "noiseUV", "offset", "rotateUV")
		for attribute in attributes:
			cmds.connectAttr("%s.%s" % (place2dTexture, attribute), "%s.%s" % (_file, attribute), f=True)		
		cmds.setAttr("%s.rotateFrame" % place2dTexture, 90)

		gammaCorrect = cmds.shadingNode("gammaCorrect", asUtility=True)		
		cmds.connectAttr("%s.outColor" % _file, "%s.value" % gammaCorrect, f=True)

		multiplyDivide = cmds.shadingNode("multiplyDivide", asUtility=True)
		cmds.connectAttr("%s.outValue" % gammaCorrect, "%s.input1" % multiplyDivide, f=True)		

		if useOverride:
			condition = cmds.shadingNode("condition", asUtility=True)
			setAttributes({"%s.firstTerm" % condition:1, "%s.secondTerm" % condition:1})
			cmds.connectAttr("%s.output" % multiplyDivide, "%s.colorIfTrue" % condition, f=True)		
			
			blendColors = cmds.shadingNode("blendColors", asUtility=True)
			for color in ("color1", "color2"):
				cmds.setAttr("%s.%s" % (blendColors, color), 0, 0, 0, type="double3")
			cmds.setAttr("%s.blender" % blendColors, 0) 			
			cmds.connectAttr("%s.output" % blendColors, "%s.colorIfFalse" % condition, f=True)

			cmds.connectAttr("%s.outColor" % condition, "%s.outColor" % surfaceShader, f=True)

			for node in (blendColors, condition):
				cmds.rename(node, "%s_%s" % (prefix, cmds.nodeType(node)))
		else:
			cmds.connectAttr("%s.outValue" % gammaCorrect, "%s.outColor" % surfaceShader, f=True)
		
		cmds.sets(sphere, e=True, forceElement=shadingEngine)
		
		for node in (surfaceShader, shadingEngine, _file, place2dTexture, gammaCorrect, multiplyDivide):
			cmds.rename(node, "%s_%s" % (prefix, cmds.nodeType(node)))
		
		return getTransform(sphere)

	def getEnvironmentLightBranch(self, file, prefix, radius):
		light = mel.eval("rmanCreateEnvLight();")
		lightTransform = cmds.parent(getTransform(light), self.controlsGroup)[0]
		
		cmds.setAttr("%s.rman__EnvMap" % light, file, type="string")
		setAttributes({"%s.rman__LightPrimaryVisibility" % light:False, 
					"%s.rman__EnvSamples" % light:128,
					"%s.rman__EnvGIMaxVariation" % light:1,
					"%s.rman__EnvColorCorrect" % light:True,
					"%s.sx" % lightTransform:radius,
					"%s.sy" % lightTransform:-radius,
					"%s.sz" % lightTransform:radius,
					"%s.rx" % lightTransform:-90})
		
		lockHideAttributes(lightTransform, ("tx", "ty", "tz", "rx", "rz"))
		lockHideAttributes(lightTransform, ("sx", "sy", "sz", "ry"), lock=False)

		return cmds.rename(lightTransform, "%s_renderManEnvLight" % prefix)
	
	def getEnvironmentShaders(self):
		if Options.createBackground:
			sphere = self.getEnvironmentSphereBranch(Datas.backgroundFile, "%s_background" % Constants.prefix, self.feedbackRadius - (self.feedbackRadius * 5 / 100), True)
			setAttributes({"%s.castsShadows" % sphere:False, 
					"%s.receiveShadows" % sphere:False,
					"%s.visibleInReflections" % sphere:False,
					"%s.visibleInRefractions" % sphere:False,
					"%s.opposite" % sphere:False})

		if Options.createLighting:
			light = self.getEnvironmentLightBranch(Datas.lightingFile, "%s_lighting" % Constants.prefix, (self.feedbackRadius * 2) - ((self.feedbackRadius * 2) * 7.5 / 100))
			cmds.setAttr("%s.rman__EnvEmitSpecular" % light, False) 			
			
			if Options.activateColorBleeding:
				mel.eval("rmanSetAttr(\"%s\",\"rman__EnvGIScheme\",\"colorbleeding\");" % light)
				renderPass = mel.eval("createRenderManNode pass:render:RenderRadiosity;")
				cmds.connectAttr("%s.message" % renderPass, "%s.rman__GDMap" % light, f=True)
				cmds.rename(renderPass, "%s_rendermanRadiosityPass" % Constants.prefix)
			else:
				mel.eval("rmanSetAttr(\"%s\",\"rman__EnvGIScheme\",\"occlusion\");" % light)
			
		if Options.createReflection:
			light =  self.getEnvironmentLightBranch(Datas.reflectionFile, "%s_reflection" % Constants.prefix, (self.feedbackRadius * 2) - ((self.feedbackRadius * 2) * 10 / 100))
			cmds.setAttr("%s.rman__EnvEmitDiffuse" % light, False) 			
			mel.eval("rmanSetAttr(\"%s\",\"rman__EnvGIScheme\",\"none\");" % light)

	def getDisplayLocator(self, name, radius, visibility):
		locator = cmds.sphere(name=name, axis=(0, 1, 0), ch=False)[0]
		cmds.rebuildSurface(locator, su=4, sv=8, kr=0, ch=False)
		setAttributes({"%s.visibility" % locator:visibility,
						"%s.rotateY" % locator:-90,
						"%s.scaleZ" % locator:-1})
		# Force UI Refresh.
		cmds.refresh(force=True)
		cmds.makeIdentity(locator, apply=True, t=False, r=True, s=True, n=False)
		setAttributes({"%s.scaleX" % locator:radius,
						"%s.scaleY" % locator:radius,
						"%s.scaleZ" % locator:radius})
		lockHideAttributes(locator, ("tx", "ty", "tz", "rx", "rz"))
		setAttributes({"%s.doubleSided" % locator:False,
						"%s.opposite" % locator:False})	
		return locator

	def getFeedback(self):
		self.feedback = self.getDisplayLocator("%s_feedback" % Constants.prefix, self.feedbackRadius, Options.displayFeedback)
		setAttributes({"%s.castsShadows" % self.feedback:False, 
					"%s.receiveShadows" % self.feedback:False,
					"%s.motionBlur" % self.feedback:False,
					"%s.primaryVisibility" % self.feedback:False,
					"%s.smoothShading" % self.feedback:False,
					"%s.visibleInReflections" % self.feedback:False,
					"%s.visibleInRefractions" % self.feedback:False})
		cmds.parent(self.feedback, self.controlsGroup)
		addToDisplayLayer(self.feedback, "%s_feedback_layer" % Constants.prefix)
		
		lambert = cmds.shadingNode("lambert", asShader=True)
		cmds.setAttr("%s.transparency" % lambert, 0.5, 0.5, 0.5, type="double3")
		shadingEngine = cmds.sets(renderable=True, noSurfaceShader=True, empty=True)		
		cmds.connectAttr("%s.outColor" % lambert, "%s.surfaceShader" % shadingEngine, f=True)
		
		file = cmds.shadingNode("file", asTexture=True)
		not cmds.ls("%s.resolution" % file) and cmds.addAttr(file, ln="resolution", at="long")
		cmds.setAttr("%s.resolution" % file, 2048)
		
		fileTextureName = Datas.backgroundFile
		if Datas.backgroundWidth > Constants.maximumViewportTextureSize:
			cmds.confirmDialog(title="%s | Information" % Constants.applicationName, message="The Background Image Is Too Large To Be Displayed On The Visual Feedback.\nCurrent Environment Image Width: %s Pixels.\nThe Visual Feedback Will Use The Reflection Image Instead." % Datas.backgroundWidth, button=("Ok",), defaultButton="Ok")
			fileTextureName = Datas.reflectionFile
		cmds.setAttr("%s.fileTextureName" % file, fileTextureName, type="string")
		cmds.connectAttr("%s.outColor" % file, "%s.color" % lambert, f=True)
		
		place2dTexture = cmds.shadingNode("place2dTexture", asUtility=True)
		cmds.connectAttr("%s.outUV" % place2dTexture, "%s.uvCoord" % file, f=True)
		cmds.connectAttr("%s.outUvFilterSize" % place2dTexture, "%s.uvFilterSize" % file, f=True)
		attributes = ("coverage", "translateFrame", "rotateFrame", "mirrorU", "mirrorV", "stagger", "wrapU", "wrapV" , "repeatUV" , "vertexUvOne" , "vertexUvTwo" , "vertexUvThree" , "vertexCameraOne", "noiseUV", "offset", "rotateUV")
		for attribute in attributes:
			cmds.connectAttr("%s.%s" % (place2dTexture, attribute), "%s.%s" % (file, attribute), f=True)		
		cmds.setAttr("%s.rotateFrame" % place2dTexture, 90)

		cmds.sets(self.feedback, e=True, forceElement=shadingEngine)

		for node in (lambert, shadingEngine, file, place2dTexture):
			cmds.rename(node, "%s_feedback_%s" % (Constants.prefix, cmds.nodeType(node)))

	def getLigthsTarget(self):
		self.lightsTarget = cmds.spaceLocator()
		addToDisplayLayer(self.lightsTarget, "%s_lighting_layer" % Constants.prefix)
		cmds.parent(self.lightsTarget, self.controlsGroup)
		self.lightsTarget = cmds.rename(self.lightsTarget, "%s_lights_target" % Constants.prefix)
		
	def getLight(self, name, type, color, multiplier, uCoordinate, vCoordinate, scale, shadowsType):
		light = cmds.shadingNode(Constants.lightTypes[type], asLight=True)

		if type == "Area" or type == "Directional" or type == "Point" or type == "Spot":
			cmds.setAttr("%s.color" % light, color[0], color[1], color[2], type="double3")
			cmds.setAttr("%s.intensity" % light, multiplier)
		
		if type == "Area":
			cmds.setAttr("%s.areaLight" % light, True)
			scale = scale / 2
		elif type == "Directional":
			pass
		elif type == "Point":
			pass
		elif type == "Spot":
			setAttributes({"%s.coneAngle" % light:96,
							"%s.penumbraAngle" % light:16})
		
		if shadowsType == "Raytraced":
			cmds.setAttr("%s.useRayTraceShadows" % light, True)
		else:
			setAttributes({"%s.useDepthMapShadows" % light:True,
						"%s.dmapResolution" % light:4096})
			lightShape = getShapes(light)[0]
			if type == "Area":
				self.addSoftShadowsAttributes(lightShape)
			else:
				self.addShadowsAttributes(lightShape)
				mel.eval("rmanSetAttr(\"%s\", \"rman__dmap_DefaultPassClass\", \"%s\");" % (lightShape, shadowsType == "Shadow Maps" and "Shadow" or "DeepShadow"))

		setAttributes({"%s.sx" % light:scale,
						"%s.sy" % light:scale,
						"%s.sz" % light:scale})
							
		cmds.parent(light, self.controlsGroup)
		
		pointOnSurfaceInfo = cmds.createNode("pointOnSurfaceInfo")
		cmds.connectAttr("%s.worldSpace[0]" % self.feedback, "%s.inputSurface" % pointOnSurfaceInfo, f=True)
		cmds.connectAttr("%s.position" % pointOnSurfaceInfo, "%s.translate" % light, f=True)
		setAttributes({"%s.parameterU" % pointOnSurfaceInfo:0.5 + (0.5 - vCoordinate),
						"%s.parameterV" % pointOnSurfaceInfo:0.5 + (0.5 - uCoordinate)})
		
		aimConstraint = cmds.aimConstraint(self.lightsTarget, light, offset=(0, 0, 0), weight=1, aimVector=(0, 0, -1), upVector=(0, 1, 0), worldUpType="vector", worldUpVector=(0, 1, 0))[0]

		addToDisplayLayer(light, "%s_lighting_layer" % Constants.prefix)
		
		cmds.rename(light, name)
		for node in (pointOnSurfaceInfo, aimConstraint):
			cmds.rename(node, "%s_%s" % (Constants.prefix, cmds.nodeType(node)))

	def addShadowsAttributes(self, light):
		for id, value in {"rman__dmap_DefaultPassClass" : "DeepShadow", "rman__ShadowMapBias" : "0.1", "rman__ShadowMapSamples" : "16", "rman__ShadowMapFilterSize" : "1", "rman__ShadowMapFilter" : "gaussian", "rman__TransmissionSubset" : "shadow" }.items():
			attribute = mel.eval("rmanGetAttrName %s;" % id)
			mel.eval("rmanAddAttr \"%s\" \"%s\" \"%s\";" % (light, attribute, value))
	
	def addSoftShadowsAttributes(self, light):
		for id, value in {"rman__dmap_DefaultPassClass" : "MinMaxShadow", "rman__ShadowMapBias" : "0.1", "rman__ShadowMapGapBias" : "0.1", "rman__ShadowMapSamples" : "32", "rman__TransmissionSubset" : "shadow" }.items():
			attribute = mel.eval("rmanGetAttrName %s;" % id)
			mel.eval("rmanAddAttr \"%s\" \"%s\" \"%s\";" % (light, attribute, value))
	
	def getSun(self):
		self.getLight("%s_sun" % Constants.prefix, Options.sunLightType, Datas.sunColor, Datas.sunMultiplier, Datas.sunU, Datas.sunV, self.feedbackRadius / 10, Options.shadowsType)

	def getDynamicLights(self):
		for light in Datas.dynamicLights.values():
			self.getLight("%s_%s" % (Constants.prefix, light.name), Options.dynamicLightsType, light.color, light.multiplier, light.uCoordinate, light.vCoordinate, self.feedbackRadius / 15, Options.shadowsType)	
	
	def bridgeFeedbackControlsAndShaders(self, target):
		lowerCaseTarget = target.lower()
		cmds.connectAttr("%s_controls.toggle%s" % (Constants.prefix, target), "%s_%s_renderManEnvLight.visibility" % (Constants.prefix, lowerCaseTarget), f=True)
		cmds.connectAttr("%s_controls.%sBias" % (Constants.prefix, lowerCaseTarget), "%s_%s_renderManEnvLightShape.rman__EnvColorBias" % (Constants.prefix, lowerCaseTarget), f=True)
		cmds.connectAttr("%s_controls.%sGain" % (Constants.prefix, lowerCaseTarget), "%s_%s_renderManEnvLightShape.rman__EnvColorGain" % (Constants.prefix, lowerCaseTarget), f=True)

	def connectFeedbackToShaders(self):
		components = ("Gamma", "Gain")	
		if Options.createBackground:
			cmds.expression(name="%s_backgroundEnvironmentControls_expression" % Constants.prefix, s="%s_background_support.rotateY = %s.rotateY;" % (Constants.prefix, self.feedback))
			scaleConstraint = cmds.scaleConstraint(self.feedback, "%s_background_support" % Constants.prefix, mo=True)
			
			target = "Background"
			lowerCaseTarget = target.lower()
			cmds.connectAttr("%s_controls.toggle%s" % (Constants.prefix, target), "%s_%s_condition.firstTerm" % (Constants.prefix, lowerCaseTarget), f=True)
			cmds.connectAttr("%s_controls.%sGamma" % (Constants.prefix, lowerCaseTarget), "%s_%s_gammaCorrect.gamma" % (Constants.prefix, lowerCaseTarget), f=True)
			cmds.connectAttr("%s_controls.%sGain" % (Constants.prefix, lowerCaseTarget), "%s_%s_multiplyDivide.input2" % (Constants.prefix, lowerCaseTarget), f=True)
		
		if Options.createLighting:
			cmds.expression(name="%s_lightingEnvironmentControls_expression" % Constants.prefix, s="%s_lighting_renderManEnvLight.rotateY = %s.rotateY+90;" % (Constants.prefix, self.feedback))
			scaleConstraint = cmds.scaleConstraint(self.feedback, "%s_lighting_renderManEnvLight" % Constants.prefix, mo=True)
			self.bridgeFeedbackControlsAndShaders("Lighting")

		if Options.createReflection:
			cmds.expression(name="%s_reflectionEnvironmentControls_expression" % Constants.prefix, s="%s_reflection_renderManEnvLight.rotateY = %s.rotateY+90;" % (Constants.prefix, self.feedback))
			scaleConstraint = cmds.scaleConstraint(self.feedback, "%s_reflection_renderManEnvLight" % Constants.prefix, mo=True)
			self.bridgeFeedbackControlsAndShaders("Reflection")
	
	def activateRaytracing(self):
		setAttributes({"defaultRenderGlobals.enableDefaultLight":False,
						"renderManGlobals.rman__torattr___rayTracing":True})

	def getGround(self):
		ground = cmds.polyPlane(name="%s_ground" % Constants.prefix, sx=15, sy=15, ch=False)[0]
		setAttributes({"%s.overrideEnabled" % ground:True,
						"%s.overrideShading" % ground:False,
						"%s.scaleX" % ground:self.feedbackRadius * math.sqrt(2),
						"%s.scaleY" % ground:self.feedbackRadius * math.sqrt(2),
						"%s.scaleZ" % ground:self.feedbackRadius * math.sqrt(2)})
		cmds.parent(ground, self.controlsGroup)

		addToDisplayLayer(ground, "%s_ground_layer" % Constants.prefix);

	def setLinearWorkflow(self):
		cmds.setAttr("rmanFinalOutputGlobals0.rman__riopt__Display_exposure1", Constants.defaultGamma)
		if Options.createBackground:
			cmds.setAttr("%s_controls.backgroundGamma" % Constants.prefix, 1.0 / Constants.defaultGamma, 1.0 / Constants.defaultGamma, 1.0 / Constants.defaultGamma, type="double3")
			
def setAttributes(attributes):
	for attribute, value in attributes.items():
		cmds.setAttr(attribute, value)

def lockHideAttributes(node, attributes, lock=True, keyable=False):
	for attribute in attributes:
		cmds.setAttr("%s.%s" % (node, attribute), lock=lock, keyable=keyable)

def addColorAttributes(node, name):
	subComponents = ("red", "green", "blue")
	cmds.addAttr(node, ln=name, at="float3", uac=True)
	for subComponent in subComponents:
		cmds.addAttr(node, ln="%s%s" % (subComponent, name.capitalize()), at="float", p=name)
	cmds.setAttr("%s.%s" % (node, name), 1, 1, 1, type="float3")
	cmds.setAttr("%s.%s" % (node, name), e=True, keyable=True)
	for subComponent in subComponents:
		cmds.setAttr("%s.%s%s" % (node, subComponent, name.capitalize()), e=True, keyable=True)

def getSceneExtent():
	geometries = cmds.ls(l=True, geometry=True)
	transforms = []
	for geometry in geometries:
		transforms.append(getTransform(geometry))

	sceneExtent = 0
	for transform in transforms:
		boundingBox = cmds.xform(transform, q=True, bb=True)
		for value in boundingBox:
			if math.fabs(value) > sceneExtent:
				sceneExtent = math.fabs(value)

	return sceneExtent

def truncFloat(number, truncValue):
	if truncValue != 0:
		return math.trunc(number / truncValue) * truncValue
	else:
		return number

def getShapes(node, fullPath=False, noIntermediate=True):
	nodes = cmds.listRelatives(node, fullPath=fullPath, shapes=True, noIntermediate=noIntermediate)
	return nodes != None and nodes or []

def getTransform(node, fullPath=True):
	transform = node
	if cmds.nodeType(node) != "transform":
		parents = cmds.listRelatives(node, fullPath=fullPath, parent=True)
		transform = parents[0]
	return transform
	
def deleteType(type, pattern):
	nodes=cmds.ls(l=True, type=type)
	for node in nodes:
		if re.search(pattern, node):
			cmds.delete(node)

def getObject(object):
	try:
		return cmds.ls(object, fl=True)[0]
	except:
		pass

def addToDisplayLayer(object, displayLayer):
	layer = getObject(displayLayer)
	layer = not layer and cmds.createDisplayLayer(name=displayLayer) or layer
	cmds.editDisplayLayerMembers(layer, object, noRecurse=True)
		
def filterNonExistingNodes(nodes):
	return [node for node in nodes if cmds.objExists(node)]