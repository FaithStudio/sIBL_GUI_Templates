[Template]
Name = @Name | Standard | String | Template Name
Path = @Path | | String | Template Path
HelpFile = @HelpFile | help/Maya_VRay_Standard Template Manual.html | String | Help File
Release = @Release | 1.2.7 | String | Template Release
Date = @Date | 27 February 2011 | String | Date
Author = @Author | Kel Solaar | String | Author
Email = @Email | thomas.mansencal@gmail.com | String | Email
Url = @Url | http://thomasmansencal.com/ | String | Url
Software = @Software | Maya | String | Software
Version = @Version | 2009 To 2011 | String | Version
Renderer = @Renderer | VRay | String | Renderer
OutputScript = @OutputScript | sIBL_Maya_Import.mel | String | Output Script
Comment = @Comment | This is Maya 2009 To 2011 VRay Template. | String | Comment

[Ibl Set Attributes]
Background|BGfile = @BGfile
Background|BGheight = @BGheight
Enviroment|EVfile = @EVfile
Enviroment|EVmulti = @EVmulti
Enviroment|EVgamma = @EVgamma
Reflection|REFfile = @REFfile
Reflection|REFmulti = @REFmulti
Reflection|REFgamma = @REFgamma
Sun|SUNu = @SUNu
Sun|SUNv = @SUNv
Sun|SUNcolor = @SUNcolor
Sun|SUNmulti = @SUNmulti
Header|Height = @Height
Header|North = @North
Lights|DynamicLights = @dynamicLights

[Common Attributes]
createBackground = @createBackground | 1 | Boolean | Create Background
createReflection = @createReflection | 1 | Boolean | Create Reflection
createLighting = @createLighting | 1 | Boolean | Create Lighting
createSun = @createSun | 1 | Boolean | Create Sun
createLights = @createLights | 1 | Boolean | Create Dynamic Lights

[Additional Attributes]
preserveSessionSettings = @preserveSessionSettings | 1 | Boolean | Preserve Session Settings
displayFeedback = @displayFeedback | 1 | Boolean | Display Feedback
sunLightType = @sunLightType | VRaySun;Directional;Area;Spot;Point;VRaySphere;VRayRect;VRayIES | Enum | Sun Light Type
dynamicLightsType = @dynamicLightsType | Directional;Area;Spot;Point;VRaySun;VRaySphere;VRayRect;VRayIES; | Enum | Dynamic Lights Type
hideLights = @hideLights | 1 | Boolean | Hide Lights
createGround = @createGround | 1 | Boolean | Create Ground
shadowCatcher = @shadowCatcher | 1 | Boolean | Ground Shadow Catcher
activateIndirectIllumination = @activateIndirectIllumination | 1 | Boolean | Activate Indirect Illumination
activateLinearWorkflow = @activateLinearWorkflow | 1 | Boolean | Activate Linear Workflow

[Remote Connection]
ConnectionType = @ConnectionType | Socket | String | Connection Type
ExecutionCommand = @ExecutionCommand | source "$loaderScriptPath"; | String | ExecutionCommand
DefaultAddress = @DefaultAddress | 127.0.0.1 | Integer | Default Address
DefaultPort = @DefaultPort | 2048 | Integer | Default Port

[Script]
// @OutputScript - @Release For @Software @Version
// Author: @Author
// EMail: @Email
// Homepage: @Url
// Template Path: @Path
// Template Last Modified: @Date
// sIBL_GUI
string $backgroundFilePath = "@BGfile";
int $backgroundWidth = @BGheight * 2;
string $lightingFilePath = "@EVfile";
float $lightingMultiplier = @EVmulti;
float $lightingGamma = @EVgamma;
string $reflectionFilePath = "@REFfile";
float $reflectionMultiplier = @REFmulti;
float $reflectionGamma = @REFgamma;
float $sunU = @SUNu;
float $sunV = @SUNv;
float $sunColor[] = {@SUNcolor};
float $sunMultiplier = @SUNmulti;
float $height = @Height;
float $north = @North;
string $dynamicLights = "@dynamicLights";
int $createBackground = @createBackground;
int $createLighting = @createLighting;
int $createReflection = @createReflection;
int $createSun = @createSun;
int $createLights = @createLights;
int $preserveSessionSettings = @preserveSessionSettings;
int $displayFeedback = @displayFeedback;
float $feedbackRadius = 100;
int $createGround = @createGround;
int $shadowCatcher = @shadowCatcher;
int $hideLights = @hideLights;
string $sunLightType = "@sunLightType";
string $dynamicLightsType = "@dynamicLightsType";
int $activateIndirectIllumination = @activateIndirectIllumination;
int $activateLinearWorkflow = @activateLinearWorkflow;

sIBL_Maya_VRay_setup($backgroundFilePath,
		$backgroundWidth,
		$lightingFilePath,
		$lightingMultiplier,
		$lightingGamma,
		$reflectionFilePath,
		$reflectionMultiplier,
		$reflectionGamma,
		$sunU,
		$sunV,
		$sunColor,
		$sunMultiplier,
		$height,
		$north,
		$dynamicLights,
		$createBackground,
		$createLighting,
		$createReflection,
		$createSun,
		$createLights,
		$preserveSessionSettings,
		$displayFeedback,
		$createGround,
		$shadowCatcher,
		$feedbackRadius,
		$hideLights,
		$sunLightType,
		$dynamicLightsType,
		$activateIndirectIllumination,
		$activateLinearWorkflow);

global proc sIBL_Maya_VRay_setup(string $backgroundFilePath,
			int $backgroundWidth,
			string $lightingFilePath,
			float $lightingMultiplier,
			float $lightingGamma,
			string $reflectionFilePath,
			float $reflectionMultiplier,
			float $reflectionGamma,
			float $sunU,
			float $sunV,
			float $sunColor[],
			float $sunMultiplier,
			float $height,
			float $north,
			string $dynamicLights,
			int $createBackground,
			int $createLighting,
			int $createReflection,
			int $createSun,
			int $createLights,
			int $preserveSessionSettings,
			int $displayFeedback,
			int $createGround,
			int $shadowCatcher,
			float $feedbackRadius,
			int $hideLights,
			string $sunLightType,
			string $dynamicLightsType,
			int $activateIndirectIllumination,
			int $activateLinearWorkflow)
{
	if(`exists sIBL_Maya_preProcessCallback`)
	{
		print("sIBL_GUI | Executing Overall Preprocess Callback!\n");
		sIBL_Maya_preProcessCallback();
	}

	if(`exists sIBL_Maya_VRay_preProcessCallback`)
	{
		print("sIBL_GUI | Executing Template Specific Preprocess Callback!\n");
		sIBL_Maya_VRay_preProcessCallback();
	}

	print("sIBL_GUI | Starting sIBL File Import!\n");

	string $sessionPreservedAttributes[] = sIBL_Maya_VRay_getSessionPreservedAttributes();
	string $sessionStoredAttributes[] = {};
	if($preserveSessionSettings)
		$sessionStoredAttributes = sIBL_Maya_VRay_storeSessionAttributes($sessionPreservedAttributes);

	sIBL_Maya_VRay_activateVRay();

	sIBL_Maya_VRay_environmentDeletion();

	$feedbackRadius = sIBL_Maya_VRay_getExtendedFeedbackRadius($feedbackRadius);
	if($preserveSessionSettings && $sessionStoredAttributes[2] == "sIBL_Feedback.scaleX" && $sessionStoredAttributes[4] == "sIBL_Feedback.scaleY" && $sessionStoredAttributes[6] == "sIBL_Feedback.scaleZ")
		$feedbackRadius = (float($sessionStoredAttributes[3]) + float($sessionStoredAttributes[5]) + float($sessionStoredAttributes[7])) / 3;

	sIBL_Maya_VRay_getMainLocator();

	if ($hideLights)
		sIBL_Maya_VRay_hideLights();

	sIBL_Maya_VRay_getEnvironment($createBackground, $createLighting, $createReflection, $backgroundFilePath, $lightingFilePath, $reflectionFilePath);

	if($backgroundWidth > 8192)
	{
		confirmDialog -title "sIBL_GUI | Information" -message ("The Background Image Is Too Large To Be Displayed On The Visual Feedback.\nCurrent Environment Image Width: " +  $backgroundWidth + " Pixels.\nThe Visual Feedback Will Use The Reflection Image Instead.")  -button "Ok" -defaultButton "Ok";
		sIBL_Maya_VRay_getFeedback($reflectionFilePath, $feedbackRadius, $displayFeedback);
	}
	else
	{
		sIBL_Maya_VRay_getFeedback($backgroundFilePath, $feedbackRadius, $displayFeedback);
	}

	if (sIBL_Maya_VRay_objectExists("sIBL_Feedback", "sIBL_GUI | No Feedback Found, Aborting!\n"))
	{
		if ($sunU != -1 && $sunV != -1)
		{
			if ($createSun)
			{
				sIBL_Maya_VRay_getSun($sunLightType, $sunU, $sunV, $sunColor, $sunMultiplier, $feedbackRadius);
			}
		}

		if ($dynamicLights != -1)
		{
			if ($createLights)
			{
				sIBL_Maya_VRay_getDynamicLights($dynamicLightsType, $dynamicLights, $feedbackRadius);
			}
		}

		string $feedback = sIBL_Maya_VRay_getObject("sIBL_Feedback");
		sIBL_Maya_VRay_connectFeedbackToSIBLShaders($feedback, $createBackground, $createLighting, $createReflection);

		if($createGround)
			sIBL_Maya_VRay_getGround($feedbackRadius, $shadowCatcher);

		if ($activateIndirectIllumination)
			sIBL_Maya_VRay_activateIndirectIllumination();

		if ($activateLinearWorkflow)
			sIBL_Maya_VRay_activateLinearWorkflow();

		if($preserveSessionSettings)
			sIBL_Maya_VRay_restoreSessionAttributes($sessionStoredAttributes);

		print("sIBL_GUI | sIBL File Import Finished!\n");

		if(`exists sIBL_Maya_postProcessCallback`)
		{
			print("sIBL_GUI | Executing Overall Postprocess Callback!\n");
			sIBL_Maya_postProcessCallback();
		}

		if(`exists sIBL_Maya_VRay_postProcessCallback`)
		{
			print("sIBL_GUI | Executing Template Specific Postprocess Callback!\n");
			sIBL_Maya_VRay_postProcessCallback();
		}
	}
}

global proc string[] sIBL_Maya_VRay_getSessionPreservedAttributes()
{
	string $sessionPreservedAttributes[] = {"sIBL_Feedback.rotateX",
						"sIBL_Feedback.scaleX",
						"sIBL_Feedback.scaleY",
						"sIBL_Feedback.scaleZ",
						"sIBL_Ground.translateX",
						"sIBL_Ground.translateY",
						"sIBL_Ground.translateZ",
						"sIBL_Ground.rotateX",
						"sIBL_Ground.rotateY",
						"sIBL_Ground.rotateZ",
						"sIBL_Ground.scaleX",
						"sIBL_Ground.scaleY",
						"sIBL_Ground.scaleZ",
						"sIBL_Ground.scaleE"
						};
	return $sessionPreservedAttributes;
}

global proc string[] sIBL_Maya_VRay_storeSessionAttributes(string $sessionPreservedAttributes[])
{
	string $sessionStoredAttributes[] = {};
	for($attribute in $sessionPreservedAttributes)
		if(size(`ls $attribute`) )
		{
			$sessionStoredAttributes[size($sessionStoredAttributes)] = $attribute;
			$sessionStoredAttributes[size($sessionStoredAttributes)] = `getAttr $attribute`;
		}
	return $sessionStoredAttributes;
}

global proc sIBL_Maya_VRay_restoreSessionAttributes(string $sessionStoredAttributes[])
{
	for($i=0; $i<size($sessionStoredAttributes); $i+=2)
		if(size(`ls $sessionStoredAttributes[$i]`) )
		{
			float $value = $sessionStoredAttributes[$i + 1];
			setAttr $sessionStoredAttributes[$i] $value;
		}
}

global proc float sIBL_Maya_VRay_getExtendedFeedbackRadius(float $feedbackRadius)
{
	float $sceneExtent = sIBL_Maya_VRay_getSceneExtent();
	$sceneExtent = $sceneExtent * sqrt(2);
	$sceneExtent = $sceneExtent + ($sceneExtent * 10 / 100);

	if($sceneExtent < $feedbackRadius)
		return $feedbackRadius;
	else
		return sIBL_Maya_VRay_truncFloatNumber($sceneExtent, 10);
}

global proc sIBL_Maya_VRay_hideLights()
{
	SelectAllLights();
	if(size(`ls -sl`) != 0)
		HideSelectedObjects();
}

global proc sIBL_Maya_VRay_deleteType(string $type, string $filter)
{
	string $typesList[] = `ls -type $type $filter`;
	if(size($typesList) != 0)
		delete($typesList);
}

global proc sIBL_Maya_VRay_environmentDeletion()
{
	// sIBL Transform Group Deletion.
	string $sceneSIBLGroup[] = `ls -fl "sIBL"`;
	if ($sceneSIBLGroup[0] != "")
	{
		delete($sceneSIBLGroup);
	}

	// sIBL Texture Files Deletion.
	sIBL_Maya_VRay_deleteType("file", "sIBL*");

	// sIBL place2dTexture Shaders Deletion.
	sIBL_Maya_VRay_deleteType("place2dTexture", "sIBL*");

	// sIBL Vray Placements Deletion.
	sIBL_Maya_VRay_deleteType("VRayPlaceEnvTex", "sIBL*");

	// sIBL Vray VRayObjectProperties Deletion.
	sIBL_Maya_VRay_deleteType("VRayObjectProperties", "sIBL*");

	// sIBL lambert Shaders Deletion.
	sIBL_Maya_VRay_deleteType("lambert", "sIBL*");
	
	// sIBL Condition Nodes Deletion.
	sIBL_Maya_VRay_deleteType("condition", "sIBL*");
	
	// sIBL gammaCorrect Nodes Deletion.
	sIBL_Maya_VRay_deleteType("gammaCorrect", "sIBL*");
	
	// sIBL blendColors Nodes Deletion.
	sIBL_Maya_VRay_deleteType("blendColors", "sIBL*");
	
	// sIBL displayLayer Nodes Deletion.
	sIBL_Maya_VRay_deleteType("displayLayer", "sIBL*");
}

global proc sIBL_Maya_VRay_getMainLocator()
{
	string $sIBLGroup = sIBL_Maya_VRay_getSIBLGroup();
	string $sIBLLocator = `createNode "annotationShape"`;
	
	setAttr ($sIBLLocator + ".displayArrow") 0;
	setAttr -lock true -keyable false ($sIBLLocator + ".displayArrow");
	setAttr -type "string" ($sIBLLocator + ".text") "[ Smart IBL Controls ]";
	
	string $sIBLLocatorTransform = sIBL_Maya_VRay_getTransform($sIBLLocator);
	
	// Adding Attributes For Various Toggling And CC Controls.
	addAttr -ln "renderTogglers" -nn "[ Render Togglers ]" -at "enum" -en "Smart IBL" $sIBLLocatorTransform;
	setAttr -e-keyable true ($sIBLLocatorTransform + "." + "renderTogglers");
	setAttr -lock true ($sIBLLocatorTransform + "." + "renderTogglers");

	string $componentsList[] = {"Background", "Reflection", "Lighting"};
	
	for($component in $componentsList)
	{	
		addAttr -ln ("toggle" + $component)  -nn ($component) -at bool  $sIBLLocatorTransform;
		setAttr -e-keyable true ($sIBLLocatorTransform + (".toggle" + $component));
		setAttr ($sIBLLocatorTransform + (".toggle" + $component)) true;
	}
	
	string $controlsList[] = {"Gamma", "Gain"};

	for($component in $componentsList)
	{	
		addAttr -ln ("cc" + $component) -nn ("[ " + $component + " CC ]") -at "enum" -en "Smart IBL" $sIBLLocatorTransform;
		setAttr -e-keyable true ($sIBLLocatorTransform + "." + ("cc" + $component));
		setAttr -lock true ($sIBLLocatorTransform + "." + ("cc" + $component));
		
		for($control in $controlsList)
		{
			string $lowerCaseComponent = `tolower $component`;
			addAttr -ln ($lowerCaseComponent + $control)  -nn $control -at double  $sIBLLocatorTransform;
			setAttr -e-keyable true ($sIBLLocatorTransform + "." + ($lowerCaseComponent + $control));
			setAttr ($sIBLLocatorTransform + "." + ($lowerCaseComponent + $control)) true;
		}
	}

	setAttr ($sIBLLocatorTransform + ".ty") 5;
	string $locksList[] = {"rx", "ry", "rz", "sx", "sy", "sz"};
	for($lock in $locksList)
		setAttr -lock true -keyable false ($sIBLLocatorTransform + "." + $lock);

	parent $sIBLLocatorTransform $sIBLGroup;
	
	rename ("sIBL" + $sIBLLocatorTransform) "sIBL_Controls";
}

global proc sIBL_Maya_VRay_getEnvironmentTexturesBranch(string $slot, string $filePath, string $prefix, int $useOverride)
{
	string $file = `shadingNode -asTexture "file"`;	
	string $gammaCorrect = `shadingNode -asUtility "gammaCorrect"`;

	if($useOverride)
	{
		string $conditionNode = `shadingNode -asUtility "condition"`;
		setAttr ($conditionNode + ".secondTerm") 1;
		connectAttr -f ($gammaCorrect + ".outValue") ($conditionNode + ".colorIfTrue");
			
		string $blendColors = `shadingNode -asUtility "blendColors"`;
		setAttr ($blendColors + ".color1") -type double3 0 0 0 ;
		setAttr ($blendColors + ".color2") -type double3 0 0 0 ;
		setAttr ($blendColors + ".blender") 0;
		
		connectAttr -f ($blendColors + ".output") ($conditionNode + ".colorIfFalse");
		connectAttr -f ($conditionNode + ".outColor") $slot;
		
		rename $conditionNode ($prefix + "_" + `nodeType $conditionNode`);
		rename $blendColors ($prefix + "_" + `nodeType $blendColors`);
	}
	else
	{
		connectAttr -f ($gammaCorrect + ".outValue") $slot;
	}
	
	connectAttr -f ($file + ".outColor") ($gammaCorrect + ".value");
	
	string $vrayPlacement = `shadingNode -asUtility "VRayPlaceEnvTex"`;
	setAttr ($vrayPlacement + ".mappingType") 2;

	connectAttr -f ($vrayPlacement + ".outUV") ($file + ".uvCoord");

	setAttr -type "string" ($file + ".fileTextureName") $filePath;

	rename $file ($prefix + "_" + `nodeType $file`);
	rename $gammaCorrect ($prefix + "_" + `nodeType $gammaCorrect`);
	rename $vrayPlacement ($prefix + "_" + `nodeType $vrayPlacement`);
}

global proc sIBL_Maya_VRay_getEnvironment(int $createBackground, int $createLighting, int $createReflection, string $backgroundFilePath, string $lightingFilePath, string $reflectionFilePath)
{
	setAttr "vraySettings.cam_overrideEnvtex" 1;

	if ($createBackground)
	{
		sIBL_Maya_VRay_getEnvironmentTexturesBranch("vraySettings.cam_envtexBg", $backgroundFilePath, "sIBL_Background", 1);
	}

	if ($createLighting)
	{
		sIBL_Maya_VRay_getEnvironmentTexturesBranch("vraySettings.cam_envtexGi", $lightingFilePath, "sIBL_Lighting", 1);
	}

	if ($createReflection)
	{
		sIBL_Maya_VRay_getEnvironmentTexturesBranch("vraySettings.cam_envtexReflect", $reflectionFilePath, "sIBL_Reflection", 1);
	}
}

global proc string sIBL_Maya_VRay_getSIBLGroup()
{
	string $sIBLGroup[] = `ls -fl "sIBL"`;
	if ($sIBLGroup[0] == "")
	{
		$sIBLGroup[0] = `createNode "transform" -n "sIBL"`;

		string $locksList[] = {"tx", "ty", "tz", "rx", "ry", "rz", "sx", "sy", "sz"};
		for($lock in $locksList)
			setAttr -lock true -keyable false ($sIBLGroup[0] + "." + $lock);
	}

	return $sIBLGroup[0];
}

global proc string sIBL_Maya_VRay_getFeedbackGeometry(float $feedbackRadius, int $feedBackVisibility)
{
 	string $feedback[] = `sphere -name "sIBL_Feedback"`;
	rebuildSurface -ch 1 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kc 0 -su 4 -du 3 -sv 8 -dv 3 -tol 0.01 -fr 0  -dir 2 $feedback;
	delete -ch;

	setAttr ($feedback[0] + ".scaleZ") (-1);
	makeIdentity -apply true -t 0 -r 0 -s 1 -n 0 $feedback[0];

	string $scaleAttributesList[] = {"scaleX", "scaleY", "scaleZ"};
	for($scaleAttribute in $scaleAttributesList)
		setAttr ($feedback[0] + "." + $scaleAttribute) $feedbackRadius;

	setAttr ($feedback[0] + ".rotateZ") 90;

	string $locksList[] = {"tx", "ty", "tz", "ry", "rz"};
	for($lock in $locksList)
		setAttr -lock true -keyable false ($feedback[0] + "." + $lock);

	setAttr ($feedback[0] + ".visibility") $feedBackVisibility;

	string $feedBackShapes[] = sIBL_Maya_VRay_getShapes($feedback[0]);
	string $renderStats[] = {"doubleSided", "opposite"};
	for($stat in $renderStats)
		setAttr ($feedBackShapes[0] + "." + $stat) false;

	sIBL_Maya_VRay_addToDisplayLayer("sIBL_Feedback_Layer", $feedback[0]);

	return $feedback[0];
}

global proc sIBL_Maya_VRay_getFeedback(string $backgroundFilePath, float $feedbackRadius, int $feedBackVisibility)
{
 	string $sIBLGroup = sIBL_Maya_VRay_getSIBLGroup();
	string $feedback = sIBL_Maya_VRay_getFeedbackGeometry($feedbackRadius, $feedBackVisibility);
	parent $feedback $sIBLGroup;

	string $lambertShader = `shadingNode -asShader "lambert"`;
	setAttr ($lambertShader + ".transparency") -type double3 0.5 0.5 0.5 ;
	string $shadingEngine = `sets -renderable true -noSurfaceShader true -empty`;
	sets -renderable true -noSurfaceShader true -empty -name $shadingEngine;
	connectAttr -f ($lambertShader + ".outColor") ($shadingEngine + ".surfaceShader");

	string $file = `shadingNode -asTexture "file"`;
	if (!`attributeExists "resolution" $file`)
		addAttr -ln "resolution" -at long $file;
 	setAttr  ($file + ".resolution") 2048;

	setAttr -type "string" ($file + ".fileTextureName") $backgroundFilePath;

	connectAttr -f ($file + ".outColor") ($lambertShader + ".color");

	string $place2dTexture = `shadingNode -asUtility "place2dTexture"`;

	connectAttr -f ($place2dTexture + ".outUV") ($file + ".uvCoord");
	connectAttr -f ($place2dTexture + ".outUvFilterSize") ($file + ".uvFilterSize");

	string $uvAttributes[] = {"coverage", "translateFrame", "rotateFrame", "mirrorU", "mirrorV", "stagger", "wrapU", "wrapV" , "repeatUV" , "vertexUvOne" , "vertexUvTwo" , "vertexUvThree" , "vertexCameraOne", "noiseUV", "offset", "rotateUV"};
	for($uvAttribute in $uvAttributes)
		connectAttr -f ($place2dTexture + "." + $uvAttribute) ($file + "." + $uvAttribute);

	setAttr ($place2dTexture + ".rotateFrame") 90;

	select -r $feedback;
	sets -e -forceElement $shadingEngine;

	string $VRayObjPropertiesNode = `createNode "VRayObjectProperties"`;
	connectAttr -f ($feedback + ".instObjGroups[0]") ($VRayObjPropertiesNode + ".dnSetMembers[0]");
	string $attributesList[] = {"generateGI", "receiveGI", "generateCaustics", "receiveCaustics", "giVisibility", "reflectionVisibility", "refractionVisibility"};
	for($attribute in $attributesList)
		setAttr ($VRayObjPropertiesNode + "." + $attribute) 0;

	$attributesList = {"castsShadows", "receiveShadows", "motionBlur", "primaryVisibility", "smoothShading", "visibleInReflections", "visibleInRefractions"};
	for($attribute in $attributesList)
		setAttr ($feedback + "." + $attribute) 0;

	rename $lambertShader ("sIBL_Feedback_" + `nodeType $lambertShader`);
	rename $shadingEngine ("sIBL_Feedback_" + `nodeType $shadingEngine`);
	rename $file ("sIBL_Feedback_" + `nodeType $file`);
	rename $VRayObjPropertiesNode ("sIBL_Feedback_" + `nodeType $VRayObjPropertiesNode`);
	rename $place2dTexture ("sIBL_Feedback_" + `nodeType $place2dTexture`);
}

global proc string sIBL_Maya_VRay_getLigthsTargetLocator()
{
	string $sIBL_Lights_Target_Locator[] = `ls -fl "sIBL_Lights_Target_Locator"`;

	if ($sIBL_Lights_Target_Locator[0] == "")
	{
		string $sIBLGroup = sIBL_Maya_VRay_getSIBLGroup();

		$sIBL_Lights_Target_Locator = `spaceLocator`;
		parent $sIBL_Lights_Target_Locator[0] $sIBLGroup;

		rename $sIBL_Lights_Target_Locator[0] "sIBL_Lights_Target_Locator";
	}

	$sIBL_Lights_Target_Locator = `ls -fl "sIBL_Lights_Target_Locator"`;
	
	sIBL_Maya_VRay_addToDisplayLayer("sIBL_Lighting_Layer", $sIBL_Lights_Target_Locator[0]);

	return $sIBL_Lights_Target_Locator[0];
}

global proc sIBL_Maya_VRay_getLight(string $type, string $name, float $scale, float $color[], float $intensity, float $uCoordinate, float $vCoordinate)
{
	switch($type)
	{
		case "Area":
			string $primitiveType = "areaLight";
			break;
		case "Directional":
			string $primitiveType = "directionalLight";
			break;
		case "Point":
			string $primitiveType = "pointLight";
			break;
		case "Spot":
			string $primitiveType = "spotLight";
			break;
		case "VRaySun":
			string $primitiveType = "VRaySunShape";
			break;
		case "VRaySphere":
			string $primitiveType = "VRayLightSphereShape";
			break;
		case "VRayRect":
			string $primitiveType = "VRayLightRectShape";
			break;
		case "VRayIES":
			string $primitiveType = "VRayLightIESShape";
			break;
	}
	
	string $sIBLGroup = sIBL_Maya_VRay_getSIBLGroup();
	string $feedback[] = `ls -fl "sIBL_Feedback"`;

	string $light = `shadingNode -asLight $primitiveType`;

	if($type == "Area" || $type == "Directional" || $type == "Point" || $type == "Spot" )
	{
		setAttr ($light + ".locatorScale") $scale;
		setAttr -type double3 ($light + ".color") ($color[0] / 255) ($color[1] / 255) ($color[2] / 255);
		setAttr ($light + ".intensity") $intensity;
		setAttr ($light + ".useRayTraceShadows") 1;
	}

	if($type == "VRaySphere" || $type == "VRayRect" || $type == "VRayIES")
		setAttr -type double3 ($light + ".lightColor") ($color[0] / 255) ($color[1] / 255) ($color[2] / 255);

	switch($type)
	{
		case "Area":
			setAttr($light + ".areaLight") 1;
			break;
		case "Directional":
			break;
		case "Point":
			break;
		case "Spot":
			setAttr($light + ".coneAngle") 96;
			setAttr($light + ".penumbraAngle") 16;
			break;
		case "VRaySun":
			setAttr ($light + ".intensityMult") (0.350 * $intensity);
			setAttr ($light + ".sizeMultiplier") (1 * ($scale / 20));
			break;
		case "VRaySphere":
			setAttr ($light + ".intensityMult") (10000 * $intensity);
			setAttr ($light + ".radius") (1.0 * ($scale / 10));
			setAttr ($light + ".subdivs") 24;
			break;
		case "VRayRect":
			setAttr ($light + ".intensityMult") (7500 * $intensity);
			setAttr ($light + ".uSize") (1.0 * ($scale / 10));
			setAttr ($light + ".vSize") (1.0 * ($scale / 10));
			setAttr ($light + ".subdivs") 24;
			break;
		case "VRayIES":
			setAttr ($light + ".intensityMult") $intensity;
			break;
	}

	parent $light $sIBLGroup;

	string $pointOnSurfaceInfo = `createNode "pointOnSurfaceInfo"`;
	connectAttr -f ($feedback[0] + "Shape.worldSpace[0]") ($pointOnSurfaceInfo + ".inputSurface");
	connectAttr -f ($pointOnSurfaceInfo + ".position") ($light + ".translate");

	setAttr ($pointOnSurfaceInfo + ".parameterU") (0.5 + (0.5 - $vCoordinate));
	setAttr ($pointOnSurfaceInfo + ".parameterV") (0.5 + (0.5 - $uCoordinate));

	string $sIBL_Lights_Target_Locator = sIBL_Maya_VRay_getLigthsTargetLocator();

	string $constraint[] = `aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "vector" -worldUpVector 0 1 0 $sIBL_Lights_Target_Locator $light`;

	sIBL_Maya_VRay_addToDisplayLayer("sIBL_Lighting_Layer", $light);

	rename $light $name;
	rename $pointOnSurfaceInfo ($name + "_" + `nodeType $pointOnSurfaceInfo`);
	rename $constraint[0] ($name + "_" + `nodeType $constraint[0]`);
}

global proc sIBL_Maya_VRay_getSun(string $type, float $sunU, float $sunV, float $sunColor[], float $sunMultiplier, float $feedbackRadius)
{
	sIBL_Maya_VRay_getLight($type, "sIBL_Sun", ($feedbackRadius / 10), $sunColor, $sunMultiplier, $sunU, $sunV);
}

global proc sIBL_Maya_VRay_getDynamicLights(string $dynamicLightsType, string $compactedDynamicLights, float $feedbackRadius)
{
	string $sIBLGroup = sIBL_Maya_VRay_getSIBLGroup();
	string $feedback[] = `ls -fl "sIBL_Feedback"`;

	string $dynamicLights[];
	tokenize($compactedDynamicLights, "|", $dynamicLights);

	for($i=0; $i<size($dynamicLights); $i+=8)
	{
		float $color[] = {float($dynamicLights[$i + 2]), float($dynamicLights[$i + 3]), float($dynamicLights[$i + 4])};
		sIBL_Maya_VRay_getLight($dynamicLightsType, "sIBL_DKL_" + $dynamicLights[$i + 1], ($feedbackRadius / 15), $color, float($dynamicLights[$i + 5]), float($dynamicLights[$i + 6]), float($dynamicLights[$i + 7]));
	}
}

global proc sIBL_Maya_VRay_bridgeFeedbackControlsAndShaders(string $target)
{
		connectAttr -f ("sIBL_Controls.toggle" + $target)  ("sIBL_" + $target + "_condition.firstTerm") ;
		string $lowerCaseTarget = `tolower $target`;
		
		string $gammaSubComponentsList[] = {"X", "Y", "Z"};
		for ($gammaSubComponent in $gammaSubComponentsList) 
		{
			connectAttr -f ("sIBL_Controls." + $lowerCaseTarget + "Gamma") ("sIBL_" + $target + "_gammaCorrect.gamma" + $gammaSubComponent);
		}
		
		string $gainSubComponentsList[] = {"R", "G", "B"};
		for ($gainSubComponent in $gainSubComponentsList) 
		{
			connectAttr -f ("sIBL_Controls." + $lowerCaseTarget + "Gain") ("sIBL_" + $target + "_file.colorGain" + $gainSubComponent);
		}
}

global proc sIBL_Maya_VRay_connectFeedbackToSIBLShaders(string $feedback, int $connectToBackground, int $connectToLighting, int $connectToReflection)
{
	if ($connectToBackground)
	{
		expression -name "sIBL_Background_Rotate_Expression" -s ("sIBL_Background_VRayPlaceEnvTex.horRotation = -" + $feedback + ".rotateX + 90;");
		sIBL_Maya_VRay_bridgeFeedbackControlsAndShaders("Background");
	}

	if ($connectToLighting)
	{
		expression -name "sIBL_Lighting_Rotate_Expression" -s ("sIBL_Lighting_VRayPlaceEnvTex.horRotation = -" + $feedback + ".rotateX + 90;");
		sIBL_Maya_VRay_bridgeFeedbackControlsAndShaders("Lighting");
	}

	if ($connectToReflection)
	{
		expression -name "sIBL_Reflection_Rotate_Expression" -s ("sIBL_Reflection_VRayPlaceEnvTex.horRotation = -" + $feedback + ".rotateX + 90;");
		sIBL_Maya_VRay_bridgeFeedbackControlsAndShaders("Reflection");
	}
}

global proc sIBL_Maya_VRay_activateIndirectIllumination()
{
	setAttr "defaultRenderGlobals.enableDefaultLight" 0;
	setAttr "vraySettings.giOn" 1;
}

global proc sIBL_Maya_VRay_activateLinearWorkflow()
{
	setAttr "vraySettings.cmap_gamma" 2.2;
	setAttr "vraySettings.cmap_affectBackground" 0;
}

global proc sIBL_Maya_VRay_getGround(float $feedbackRadius, int $shadowCatcher)
{
	string $sIBLGroup = sIBL_Maya_VRay_getSIBLGroup();
	string $ground[] = `polyPlane -sx 15 -sy 15 -ch 0`;

	setAttr ($ground[0] + ".overrideEnabled") 1;
	setAttr ($ground[0] + ".overrideShading") 0;

	string $scaleAttributesList[] = {"scaleX", "scaleY", "scaleZ"};
	for($scaleAttribute in $scaleAttributesList)
		setAttr ($ground[0] + "." + $scaleAttribute) ($feedbackRadius * sqrt(2));

	parent $ground[0] $sIBLGroup;
	
	if ($shadowCatcher)
	{
		string $VRayObjPropertiesNode = `createNode "VRayObjectProperties"`;
		connectAttr -f ($ground[0] + ".instObjGroups[0]") ($VRayObjPropertiesNode + ".dnSetMembers[0]");
		string $attributesList[] = {"giVisibility"};
		for($attribute in $attributesList)
			setAttr ($VRayObjPropertiesNode + "." + $attribute) 0;
		string $attributesList[] = {"matteSurface", "shadows"};
		for($attribute in $attributesList)
			setAttr ($VRayObjPropertiesNode + "." + $attribute) 1;
		
		setAttr ($VRayObjPropertiesNode + ".shadowBrightness") 0.5;
		setAttr ($VRayObjPropertiesNode + ".giAmount") 0.5;
		
		rename $VRayObjPropertiesNode ("sIBL_Ground_" + `nodeType $VRayObjPropertiesNode`);
	}
	
	sIBL_Maya_VRay_addToDisplayLayer("sIBL_Ground_Layer", $ground[0]);

	rename $ground[0] "sIBL_Ground";
}

global proc sIBL_Maya_VRay_activateVRay()
{
	if (`pluginInfo -q -loaded "vrayformaya"` == 0)
	{
		loadPlugin("vrayformaya");
	}
	setAttr -type "string" defaultRenderGlobals.currentRenderer "vray";
	vrayCreateVRaySettingsNode();
}

global proc float sIBL_Maya_VRay_getSceneExtent()
{
	string $geometries[] = `ls -l -geometry`;
	string $transforms[] = {};

	for($geometry in $geometries)
		$transforms[size($transforms)] = sIBL_Maya_VRay_getTransform($geometry);
	    
	float $sceneExtent = 0;
	for($transform in $transforms)
	{
		float $boundingBox[] = `xform -q -bb $transform`;
			
		for($i=0; $i < size($boundingBox); $i++)
			if(abs($boundingBox[$i]) > $sceneExtent)
				$sceneExtent = abs($boundingBox[$i]);
	}
	return $sceneExtent;
}

global proc float sIBL_Maya_VRay_truncFloatNumber(float $number, float $truncValue)
{
	if($truncValue != 0)
		return `trunc ($number / $truncValue)` * $truncValue; 
	else
		return $number;
}

global proc string[] sIBL_Maya_VRay_getShapes(string $xform)
{
	string $shapes[];
	$shapes[0] = $xform;
	if ("transform" == `nodeType $xform`)
		$shapes = `listRelatives -fullPath -shapes $xform`;
	return $shapes;
}

global proc string sIBL_Maya_VRay_getTransform(string $shape)
{
	string $transform = "";
	if ("transform" != `nodeType $shape`)
	{
		string $parents[] = `listRelatives -fullPath -parent $shape`;
		$transform = $parents[0];
	}
	return $transform;
}

global proc int sIBL_Maya_VRay_objectExists(string $object, string $errorMessage)
{
	string $objectList[] = `ls -fl $object`;
	if ($objectList[0] != "")
	{
		return 1;
	}
	else
	{
		error($errorMessage);
		return 0;
	}
}

global proc string sIBL_Maya_VRay_getObject(string $object)
{
	string $list[] = `ls -fl $object`;
	return $list[0];
}

global proc string sIBL_Maya_VRay_addToDisplayLayer(string $layerName, string $object)
{
	string $layer = sIBL_Maya_VRay_getObject($layerName);
	if($layer == "")
		$layer = `createDisplayLayer -name $layerName`;
	editDisplayLayerMembers -noRecurse $layer $object;
	return $layer;
}

global proc string[] sIBL_Maya_VRay_filterNonExistingNodes(string $nodes[])
{
	string $filteredNodes[];
	for($node in $nodes)
	if(`objExists($node)`)
		$filteredNodes[size($filteredNodes)] =  $node;
	return $filteredNodes;
}

